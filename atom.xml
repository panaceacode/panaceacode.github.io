<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi</title>
  
  
  <link href="https://panaceacode.github.io/atom.xml" rel="self"/>
  
  <link href="https://panaceacode.github.io/"/>
  <updated>2021-05-08T10:35:55.773Z</updated>
  <id>https://panaceacode.github.io/</id>
  
  <author>
    <name>Zirun Lin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CPU Virtualization-Process API</title>
    <link href="https://panaceacode.github.io/2020/05/07/CPU-Virtualization-Process-API/"/>
    <id>https://panaceacode.github.io/2020/05/07/CPU-Virtualization-Process-API/</id>
    <published>2020-05-07T12:30:51.000Z</published>
    <updated>2021-05-08T10:35:55.773Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;1-fork-System-Call&quot;&gt;&lt;a href=&quot;#1-fork-System-Call&quot; class=&quot;headerlink&quot; title=&quot;1. fork() System Call&quot;&gt;&lt;/a&gt;&lt;em&gt;1. fork() System</summary>
        
      
    
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/categories/Operating-System/"/>
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>CPU Virtualization-Processes</title>
    <link href="https://panaceacode.github.io/2020/05/05/CPU-Virtualization-Processes/"/>
    <id>https://panaceacode.github.io/2020/05/05/CPU-Virtualization-Processes/</id>
    <published>2020-05-05T06:25:07.000Z</published>
    <updated>2021-05-07T12:33:12.956Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;Study notes of &lt;strong&gt;Operating System: Three Easy Pieces&lt;/strong&gt;(available at &lt;a</summary>
        
      
    
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/categories/Operating-System/"/>
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>Alg.19 Pattern Matcher</title>
    <link href="https://panaceacode.github.io/2020/04/12/Alg-19-Pattern-Matcher/"/>
    <id>https://panaceacode.github.io/2020/04/12/Alg-19-Pattern-Matcher/</id>
    <published>2020-04-12T13:40:44.000Z</published>
    <updated>2021-05-06T14:27:33.192Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.18 Underscorify Substring</title>
    <link href="https://panaceacode.github.io/2020/04/11/Alg-18-Underscorify-Substring/"/>
    <id>https://panaceacode.github.io/2020/04/11/Alg-18-Underscorify-Substring/</id>
    <published>2020-04-11T06:56:59.000Z</published>
    <updated>2021-05-04T08:34:08.578Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;For this problem, we need to write a function to wrap every potential substring with underscores in the main string. Here is an</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.17 Longest Substring Without Duplication</title>
    <link href="https://panaceacode.github.io/2020/04/10/Alg-17-Longest-Substring-Without-Duplication/"/>
    <id>https://panaceacode.github.io/2020/04/10/Alg-17-Longest-Substring-Without-Duplication/</id>
    <published>2020-04-10T15:15:55.000Z</published>
    <updated>2021-05-02T16:53:33.432Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;In this problem, we need to write a function to find out the longest substring without any</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.16 Reverse Words In String</title>
    <link href="https://panaceacode.github.io/2020/04/09/Alg-16-Reverse-Words-In-String/"/>
    <id>https://panaceacode.github.io/2020/04/09/Alg-16-Reverse-Words-In-String/</id>
    <published>2020-04-09T14:13:38.000Z</published>
    <updated>2021-05-01T14:37:22.784Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;In this problem, given a string of words seperated by one or more whitespaces. We need to write a</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.15 Valid IP Addresses</title>
    <link href="https://panaceacode.github.io/2020/04/09/Alg-15-Valid-IP-Addresses/"/>
    <id>https://panaceacode.github.io/2020/04/09/Alg-15-Valid-IP-Addresses/</id>
    <published>2020-04-09T13:44:35.000Z</published>
    <updated>2021-05-01T14:00:22.750Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Given a string of length 12 or smaller, consists of only digits. We need to write a function to</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.14 Group Anagrams</title>
    <link href="https://panaceacode.github.io/2020/04/09/Alg-14-Group-Anagrams/"/>
    <id>https://panaceacode.github.io/2020/04/09/Alg-14-Group-Anagrams/</id>
    <published>2020-04-09T11:30:27.000Z</published>
    <updated>2021-05-01T12:22:48.624Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Anagrams are strings made up of exactly the same letters, in this problem, we need to write a</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.13 Longest Palindromic Substring</title>
    <link href="https://panaceacode.github.io/2020/04/08/Alg-13-Longest-Palindromic-Substring/"/>
    <id>https://panaceacode.github.io/2020/04/08/Alg-13-Longest-Palindromic-Substring/</id>
    <published>2020-04-08T05:26:50.000Z</published>
    <updated>2021-05-01T05:44:35.661Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Previous problem explains what is a palindrome string, in this problem, we will write a function</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.12 Run-Length Encoding</title>
    <link href="https://panaceacode.github.io/2020/04/08/Alg-12-Run-Length-Encoding/"/>
    <id>https://panaceacode.github.io/2020/04/08/Alg-12-Run-Length-Encoding/</id>
    <published>2020-04-08T05:09:18.000Z</published>
    <updated>2021-05-01T05:17:45.358Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Here is the introduction of Run_Length Encoding: &lt;a</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.11 Caesar Cipher Encryptor</title>
    <link href="https://panaceacode.github.io/2020/04/08/Alg-11-Caesar-Cipher-Encryptor/"/>
    <id>https://panaceacode.github.io/2020/04/08/Alg-11-Caesar-Cipher-Encryptor/</id>
    <published>2020-04-08T04:35:46.000Z</published>
    <updated>2021-05-01T04:59:14.013Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;This is a easy string-related problem, given a string and a number k, we need to shift every</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.10 Palindrome Check</title>
    <link href="https://panaceacode.github.io/2020/04/07/Alg-10-Palindrome-Check/"/>
    <id>https://panaceacode.github.io/2020/04/07/Alg-10-Palindrome-Check/</id>
    <published>2020-04-07T04:19:32.000Z</published>
    <updated>2021-05-01T04:40:55.185Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;A palindrome is a string that’s written the same forward and backward. For this problem, we need</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.9 Merge Sort</title>
    <link href="https://panaceacode.github.io/2020/04/07/Alg-9-Merge-Sort/"/>
    <id>https://panaceacode.github.io/2020/04/07/Alg-9-Merge-Sort/</id>
    <published>2020-04-07T02:13:24.000Z</published>
    <updated>2021-05-01T03:32:15.694Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;For the Merge Sort, it also uses the conception “Divide and Conquer”. We simply divide the</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Sorting" scheme="https://panaceacode.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Alg.8 Quick Sort</title>
    <link href="https://panaceacode.github.io/2020/04/07/Alg-8-Quick-Sort/"/>
    <id>https://panaceacode.github.io/2020/04/07/Alg-8-Quick-Sort/</id>
    <published>2020-04-07T01:22:04.000Z</published>
    <updated>2021-05-01T05:50:09.400Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Quick Sort is a widely-used sorting algorithm, it borrows the strategy, “Divide and Conquer”, to</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Sorting" scheme="https://panaceacode.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Alg.7 Selection Sort</title>
    <link href="https://panaceacode.github.io/2020/04/06/Alg-7-Selection-Sort/"/>
    <id>https://panaceacode.github.io/2020/04/06/Alg-7-Selection-Sort/</id>
    <published>2020-04-06T08:13:20.000Z</published>
    <updated>2021-04-30T09:52:43.477Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Selection Sort is pretty much like the Insertion Sort. We divide the original array into two</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Sorting" scheme="https://panaceacode.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Alg.6 Insertion Sort</title>
    <link href="https://panaceacode.github.io/2020/04/05/Alg-6-Insertion-Sort/"/>
    <id>https://panaceacode.github.io/2020/04/05/Alg-6-Insertion-Sort/</id>
    <published>2020-04-05T14:49:29.000Z</published>
    <updated>2021-04-30T05:42:06.732Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br &gt;&lt;br&gt;&lt;em&gt;We apply Insertion Sort to sort the given arrays. For the Insertion Sort, we basically separate</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Sorting" scheme="https://panaceacode.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Alg.5 Bubble Sort</title>
    <link href="https://panaceacode.github.io/2020/04/05/Alg-5-Bubble-Sort/"/>
    <id>https://panaceacode.github.io/2020/04/05/Alg-5-Bubble-Sort/</id>
    <published>2020-04-05T14:27:56.000Z</published>
    <updated>2021-04-30T02:37:34.550Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Bubble Sort is probably the first sorting algorithm we learned when we study algorithm. In this</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Sorting" scheme="https://panaceacode.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Alg.4 Kadane&#39;s Algorithm</title>
    <link href="https://panaceacode.github.io/2020/04/05/Alg-4-Kadane-s-Algorithm/"/>
    <id>https://panaceacode.github.io/2020/04/05/Alg-4-Kadane-s-Algorithm/</id>
    <published>2020-04-05T13:13:19.000Z</published>
    <updated>2021-04-30T02:37:13.353Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;In this problem, we have to write a function to get a given array’s maximum sum of its subarray.</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Arrays" scheme="https://panaceacode.github.io/tags/Arrays/"/>
    
  </entry>
  
  <entry>
    <title>Alg.3 Remove Duplicates From Linked List</title>
    <link href="https://panaceacode.github.io/2020/04/04/Alg-3-Remove-Duplicates-From-Linked-List/"/>
    <id>https://panaceacode.github.io/2020/04/04/Alg-3-Remove-Duplicates-From-Linked-List/</id>
    <published>2020-04-04T10:20:51.000Z</published>
    <updated>2021-04-30T02:38:21.428Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;GIven a singly linked list, their nodes are sorted with respect to their value. Write a function</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Linked Lists" scheme="https://panaceacode.github.io/tags/Linked-Lists/"/>
    
  </entry>
  
  <entry>
    <title>Alg.2 Validate Subsequence</title>
    <link href="https://panaceacode.github.io/2020/04/04/Alg-2-Validate-Subsequence/"/>
    <id>https://panaceacode.github.io/2020/04/04/Alg-2-Validate-Subsequence/</id>
    <published>2020-04-04T10:06:57.000Z</published>
    <updated>2021-04-30T02:36:27.343Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Write a function that determines whether “sequence” array is a subsequence of “array” array. For</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Arrays" scheme="https://panaceacode.github.io/tags/Arrays/"/>
    
  </entry>
  
</feed>
