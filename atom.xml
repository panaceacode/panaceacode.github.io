<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi</title>
  
  
  <link href="https://panaceacode.github.io/atom.xml" rel="self"/>
  
  <link href="https://panaceacode.github.io/"/>
  <updated>2021-07-09T15:57:33.479Z</updated>
  <id>https://panaceacode.github.io/</id>
  
  <author>
    <name>Zirun Lin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Alg.26 Same BSTs</title>
    <link href="https://panaceacode.github.io/2020/05/11/Alg-26-Same-BSTs/"/>
    <id>https://panaceacode.github.io/2020/05/11/Alg-26-Same-BSTs/</id>
    <published>2020-05-11T15:52:45.000Z</published>
    <updated>2021-07-09T15:57:33.479Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Write a function to determine whether 2 arrays represent the same BST.&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;img</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Binary Search Tree" scheme="https://panaceacode.github.io/tags/Binary-Search-Tree/"/>
    
  </entry>
  
  <entry>
    <title>Alg.25 BST Traversal</title>
    <link href="https://panaceacode.github.io/2020/05/11/Alg-25-BST-Traversal/"/>
    <id>https://panaceacode.github.io/2020/05/11/Alg-25-BST-Traversal/</id>
    <published>2020-05-11T14:01:08.000Z</published>
    <updated>2021-07-06T14:15:46.300Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;This one will uses 3 ways to traverse a BST (in-order/pre-order/post-order), the code</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Binary Search Tree" scheme="https://panaceacode.github.io/tags/Binary-Search-Tree/"/>
    
  </entry>
  
  <entry>
    <title>Alg.24 Validate BST</title>
    <link href="https://panaceacode.github.io/2020/05/11/Alg-24-Validate-BST/"/>
    <id>https://panaceacode.github.io/2020/05/11/Alg-24-Validate-BST/</id>
    <published>2020-05-11T11:33:09.000Z</published>
    <updated>2021-07-06T14:10:22.752Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Write a function to check whether a tree is a BST.&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;img</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Binary Search Tree" scheme="https://panaceacode.github.io/tags/Binary-Search-Tree/"/>
    
  </entry>
  
  <entry>
    <title>Alg.23 Find Closest Value In BST</title>
    <link href="https://panaceacode.github.io/2020/05/11/Alg-23-Find-Closest-Value-In-BST/"/>
    <id>https://panaceacode.github.io/2020/05/11/Alg-23-Find-Closest-Value-In-BST/</id>
    <published>2020-05-11T05:13:36.000Z</published>
    <updated>2021-07-04T15:53:39.652Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Write a function to find the closest value of the target number in a BST. Here is an</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Binary Search Tree" scheme="https://panaceacode.github.io/tags/Binary-Search-Tree/"/>
    
  </entry>
  
  <entry>
    <title>Alg.22 Min Height BST</title>
    <link href="https://panaceacode.github.io/2020/05/10/Alg-22-Min-Height-BST/"/>
    <id>https://panaceacode.github.io/2020/05/10/Alg-22-Min-Height-BST/</id>
    <published>2020-05-10T14:27:18.000Z</published>
    <updated>2021-07-04T14:43:12.582Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Given a sorted array (each element is distinct), write a function to construct a BST with min</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Binary Search Tree" scheme="https://panaceacode.github.io/tags/Binary-Search-Tree/"/>
    
  </entry>
  
  <entry>
    <title>Alg.21 BST Construction</title>
    <link href="https://panaceacode.github.io/2020/05/10/Alg-21-BST-Construction/"/>
    <id>https://panaceacode.github.io/2020/05/10/Alg-21-BST-Construction/</id>
    <published>2020-05-10T12:55:04.000Z</published>
    <updated>2021-07-04T15:06:26.256Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Definition of a valid Binary Search Tree: its value is strictly greater than its</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Binary Search Tree" scheme="https://panaceacode.github.io/tags/Binary-Search-Tree/"/>
    
  </entry>
  
  <entry>
    <title>CPU Virtualization-Scheduling(Proportional Share)</title>
    <link href="https://panaceacode.github.io/2020/05/10/CPU-Virtualization-Scheduling-Proportional-Share/"/>
    <id>https://panaceacode.github.io/2020/05/10/CPU-Virtualization-Scheduling-Proportional-Share/</id>
    <published>2020-05-10T09:15:28.000Z</published>
    <updated>2021-07-03T13:58:27.051Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在本章中，我们介绍比例份额（proportional-share）调度，有时也称为公平份额（fair-share）调度。比例份额算法基于一个简单的想法：调度程序的最终目标，是确保每个工作获得一定比例的 CPU</summary>
        
      
    
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/categories/Operating-System/"/>
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>CPU Virtualization-Scheduling(The Multi-Level Feedback Queue)</title>
    <link href="https://panaceacode.github.io/2020/05/10/CPU-Virtualization-Scheduling-The-Multi-Level-Feedback-Queue/"/>
    <id>https://panaceacode.github.io/2020/05/10/CPU-Virtualization-Scheduling-The-Multi-Level-Feedback-Queue/</id>
    <published>2020-05-09T19:52:52.000Z</published>
    <updated>2021-06-17T09:17:04.144Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;上一节我们介绍了一些进程调度方法，它们在优化&lt;strong&gt;turnaround time&lt;/strong&gt;和&lt;strong&gt;response time&lt;/strong&gt;上有不同的思路。这一节要介绍Multi-Level Feedback</summary>
        
      
    
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/categories/Operating-System/"/>
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>CPU Virtualization-Scheduling(Introduction)</title>
    <link href="https://panaceacode.github.io/2020/05/09/CPU-Virtualization-Scheduling-Introduction/"/>
    <id>https://panaceacode.github.io/2020/05/09/CPU-Virtualization-Scheduling-Introduction/</id>
    <published>2020-05-09T09:14:44.000Z</published>
    <updated>2021-06-15T12:42:12.019Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;上节介绍的是low-level的mechanisms，比如线程如何切换。本节主要介绍的是Scheduling和一些scheduling policies，线程调度问题。这些是属于high-level policies。&lt;br&gt;&lt;/p&gt;
&lt;h3</summary>
        
      
    
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/categories/Operating-System/"/>
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>CPU Virtualization-Mechanism(Limited Direct Execution)</title>
    <link href="https://panaceacode.github.io/2020/05/08/CPU-Virtualization-Mechanism-Limited-Direct-Execution/"/>
    <id>https://panaceacode.github.io/2020/05/08/CPU-Virtualization-Mechanism-Limited-Direct-Execution/</id>
    <published>2020-05-08T09:16:56.000Z</published>
    <updated>2021-06-01T09:14:15.661Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;该节关于底层的进程切换原理，为后面的schedule章节的底层逻辑&lt;/em&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-Basic-technique-Limited-Direct-Execution&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/categories/Operating-System/"/>
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>CPU Virtualization-Process API</title>
    <link href="https://panaceacode.github.io/2020/05/07/CPU-Virtualization-Process-API/"/>
    <id>https://panaceacode.github.io/2020/05/07/CPU-Virtualization-Process-API/</id>
    <published>2020-05-07T12:30:51.000Z</published>
    <updated>2021-05-08T12:52:02.465Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;1-fork-System-Call&quot;&gt;&lt;a href=&quot;#1-fork-System-Call&quot; class=&quot;headerlink&quot; title=&quot;1. fork() System Call&quot;&gt;&lt;/a&gt;&lt;em&gt;1. fork() System</summary>
        
      
    
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/categories/Operating-System/"/>
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>CPU Virtualization-Processes</title>
    <link href="https://panaceacode.github.io/2020/05/05/CPU-Virtualization-Processes/"/>
    <id>https://panaceacode.github.io/2020/05/05/CPU-Virtualization-Processes/</id>
    <published>2020-05-05T06:25:07.000Z</published>
    <updated>2021-05-10T04:53:09.544Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;Study notes of &lt;strong&gt;Operating System: Three Easy Pieces&lt;/strong&gt;(available at &lt;a</summary>
        
      
    
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/categories/Operating-System/"/>
    
    
    <category term="Operating System" scheme="https://panaceacode.github.io/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>Alg.20 Knutt-Morris-Pratt Algorithm</title>
    <link href="https://panaceacode.github.io/2020/04/13/Alg-20-Knutt-Morris-Pratt-Algorithm/"/>
    <id>https://panaceacode.github.io/2020/04/13/Alg-20-Knutt-Morris-Pratt-Algorithm/</id>
    <published>2020-04-13T06:35:28.000Z</published>
    <updated>2021-07-04T08:10:57.465Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Knutt-Morris-Pratt Algorithm, known as KMP, is a famous algorithm to solve substring problem.</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="String" scheme="https://panaceacode.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Alg.19 Pattern Matcher</title>
    <link href="https://panaceacode.github.io/2020/04/12/Alg-19-Pattern-Matcher/"/>
    <id>https://panaceacode.github.io/2020/04/12/Alg-19-Pattern-Matcher/</id>
    <published>2020-04-12T13:40:44.000Z</published>
    <updated>2021-05-10T05:27:04.288Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;We’re given 2 non-empty strings. The first one is a pattern consisting of only “x” and “y”, the</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.18 Underscorify Substring</title>
    <link href="https://panaceacode.github.io/2020/04/11/Alg-18-Underscorify-Substring/"/>
    <id>https://panaceacode.github.io/2020/04/11/Alg-18-Underscorify-Substring/</id>
    <published>2020-04-11T06:56:59.000Z</published>
    <updated>2021-05-04T08:34:08.578Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;For this problem, we need to write a function to wrap every potential substring with underscores in the main string. Here is an</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.17 Longest Substring Without Duplication</title>
    <link href="https://panaceacode.github.io/2020/04/10/Alg-17-Longest-Substring-Without-Duplication/"/>
    <id>https://panaceacode.github.io/2020/04/10/Alg-17-Longest-Substring-Without-Duplication/</id>
    <published>2020-04-10T15:15:55.000Z</published>
    <updated>2021-05-02T16:53:33.432Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;In this problem, we need to write a function to find out the longest substring without any</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.16 Reverse Words In String</title>
    <link href="https://panaceacode.github.io/2020/04/09/Alg-16-Reverse-Words-In-String/"/>
    <id>https://panaceacode.github.io/2020/04/09/Alg-16-Reverse-Words-In-String/</id>
    <published>2020-04-09T14:13:38.000Z</published>
    <updated>2021-05-01T14:37:22.784Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;In this problem, given a string of words seperated by one or more whitespaces. We need to write a</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.15 Valid IP Addresses</title>
    <link href="https://panaceacode.github.io/2020/04/09/Alg-15-Valid-IP-Addresses/"/>
    <id>https://panaceacode.github.io/2020/04/09/Alg-15-Valid-IP-Addresses/</id>
    <published>2020-04-09T13:44:35.000Z</published>
    <updated>2021-05-01T14:00:22.750Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Given a string of length 12 or smaller, consists of only digits. We need to write a function to</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.14 Group Anagrams</title>
    <link href="https://panaceacode.github.io/2020/04/09/Alg-14-Group-Anagrams/"/>
    <id>https://panaceacode.github.io/2020/04/09/Alg-14-Group-Anagrams/</id>
    <published>2020-04-09T11:30:27.000Z</published>
    <updated>2021-05-01T12:22:48.624Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Anagrams are strings made up of exactly the same letters, in this problem, we need to write a</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
  <entry>
    <title>Alg.13 Longest Palindromic Substring</title>
    <link href="https://panaceacode.github.io/2020/04/08/Alg-13-Longest-Palindromic-Substring/"/>
    <id>https://panaceacode.github.io/2020/04/08/Alg-13-Longest-Palindromic-Substring/</id>
    <published>2020-04-08T05:26:50.000Z</published>
    <updated>2021-05-01T05:44:35.661Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;em&gt;From algoexpert.io&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Previous problem explains what is a palindrome string, in this problem, we will write a function</summary>
        
      
    
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://panaceacode.github.io/tags/Algorithm/"/>
    
    <category term="Strings" scheme="https://panaceacode.github.io/tags/Strings/"/>
    
  </entry>
  
</feed>
