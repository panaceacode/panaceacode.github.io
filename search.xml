<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Alg.1 Two Sum</title>
    <url>/panaceacode.github.io/2020/04/04/Alg-1-Two-Sum/</url>
    <content><![CDATA[<p><em>AlgoExpert is a cool place to practice your algorithm skill, and you can visit <a href="https://www.algoexpert.io/product">https://www.algoexpert.io/product</a> to find out what you can get.</em><br><br><em>Two Sum from algoexpert.io, basically 3 ways to solve this problem：</em><br><br><em>1. Brute Force</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] twoNumberSum(<span class="keyword">int</span>[] array, <span class="keyword">int</span> targetSum) &#123;</span><br><span class="line">    <span class="comment">// Write your code here.</span></span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; array.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i] + array[j] == targetSum) &#123;</span><br><span class="line">                    ans[<span class="number">0</span>] = array[i];</span><br><span class="line">                    ans[<span class="number">1</span>] = array[j];</span><br><span class="line">                    <span class="keyword">return</span> ans;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n^2); Space complexity: O(1)<br><em>2. Use a set, improve time complexity by adding extra space comlexcity.</em> <br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] twoNumberSum(<span class="keyword">int</span>[] array, <span class="keyword">int</span> targetSum) &#123;</span><br><span class="line">    <span class="comment">// Write your code here.</span></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> remain = targetSum - array[i];</span><br><span class="line">            <span class="keyword">if</span> (set.contains(remain)) &#123;</span><br><span class="line">                ans[<span class="number">0</span>] = array[i];</span><br><span class="line">                ans[<span class="number">1</span>] = targetSum - ans[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n); Space complexity: O(n)<br><em>3. Two pointers, this method works only if the array is sorted. In this problem, we have to sort the array first.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] twoNumberSum(<span class="keyword">int</span>[] array, <span class="keyword">int</span> targetSum) &#123;</span><br><span class="line">    <span class="comment">// Write your code here.</span></span><br><span class="line">        Arrays.sort(array);</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[left] + array[right] == targetSum) </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;array[left], array[right]&#125;;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (array[left] + array[right] &lt; targetSum) left++;</span><br><span class="line">            <span class="keyword">else</span> right--;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity:O(nlogn)(since we need to sort this array first); Space complexity:O(1)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Arrays</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.11 Caesar Cipher Encryptor</title>
    <url>/panaceacode.github.io/2020/04/08/Alg-11-Caesar-Cipher-Encryptor/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>This is a easy string-related problem, given a string and a number k, we need to shift every character in the string k positions in the alphabet list.</em><br><br><em>Basically, we iterate this string, get each expecting character after we shift k positions. According to the ASCII code, assume current character’s ASCII is c, the transformed ASCII is c - ‘a’ + k, then we get the remainder, answer will be ‘a’ + (c - ‘a’ + k) % (‘z’ - ‘a’ + 1).</em><br><br><em>Here is the code implementation:</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">caesarCypherEncryptor</span><span class="params">(String str, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        StringBuilder ans = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> diff = str.charAt(i) - <span class="string">&#x27;a&#x27;</span> + key;</span><br><span class="line">            <span class="keyword">int</span> trans = diff % (<span class="string">&#x27;z&#x27;</span> - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">char</span> c = (<span class="keyword">char</span>)(trans + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            ans.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ans.toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n); Space complexity: O(n)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Strings</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.10 Palindrome Check</title>
    <url>/panaceacode.github.io/2020/04/07/Alg-10-Palindrome-Check/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>A palindrome is a string that’s written the same forward and backward. For this problem, we need to write a function to determine whether a string is palindrome</em><br><br><em>The code implementation is pretty straightforward, we use two pointers, they point to the start and end of the string. Then, we check if the characters are the same until we reach the midpoint of the string.</em><br><br><em>Here is the code implementation</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = str.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(left) != str.charAt(right)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n); Space complexity: O(1)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Strings</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.12 Run-Length Encoding</title>
    <url>/panaceacode.github.io/2020/04/08/Alg-12-Run-Length-Encoding/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>Here is the introduction of Run_Length Encoding: <a href="https://en.wikipedia.org/wiki/Run-length_encoding">https://en.wikipedia.org/wiki/Run-length_encoding</a></em><br><br><em>Code implementation</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">runLengthEncoding</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> currentLength = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; string.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> cur = string.charAt(i);</span><br><span class="line">            <span class="keyword">char</span> prev = string.charAt(i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (cur != prev || currentLength == <span class="number">9</span>) &#123;</span><br><span class="line">                result.append(Integer.toString(currentLength));</span><br><span class="line">                result.append(prev);</span><br><span class="line">                currentLength = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            currentLength++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        result.append(Integer.toString(currentLength));</span><br><span class="line">        result.append(string.charAt(string.length() - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><em>Pay attention to the edge condition, after we finish the iteration, there are two conditions: 1. the last character is different from its preceding character, or 2. the last character is the same as the previous one. We need to append another integer and character under both conditions.</em><br><br>Time complexity: O(n); Space complexity: O(n)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Strings</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.15 Valid IP Addresses</title>
    <url>/panaceacode.github.io/2020/04/09/Alg-15-Valid-IP-Addresses/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>Given a string of length 12 or smaller, consists of only digits. We need to write a function to find out all the potential IP addresses by inserting 3 ‘.’ to each address. In the code implementation, we simply iterate the original string and enumerate all the combinations. The key part is how we design a function to recognize a valid IP addess.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(string);</span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">255</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> string.equals(Integer.toString(num));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><em>In this ‘isValid’ function, we return ‘string.equals(Integer.toString(num))’ in order to avoid situations like ‘01’, ‘001’, ‘00’, etc. If we find a valid IP, we have to build up the result.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">join</span><span class="params">(String[] validIp)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(validIp[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; validIp.length; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            sb.append(validIp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><em>Now, we can do our iteration and enumerate all the combinations.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">validIPAddresses</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; ans = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = string.length();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">4</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Math.min(len, <span class="number">4</span>); i++)&#123;</span><br><span class="line">            String[] validIp = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">            validIp[<span class="number">0</span>] = string.substring(<span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">if</span> (!isValid(validIp[<span class="number">0</span>])) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; i + Math.min(len - i, <span class="number">4</span>); j++) &#123;</span><br><span class="line">                validIp[<span class="number">1</span>] = string.substring(i, j);</span><br><span class="line">                <span class="keyword">if</span> (!isValid(validIp[<span class="number">1</span>])) <span class="keyword">continue</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; j + Math.min(len - j, <span class="number">4</span>); k++) &#123;</span><br><span class="line">                    validIp[<span class="number">2</span>] = string.substring(j, k);</span><br><span class="line">                    validIp[<span class="number">3</span>] = string.substring(k);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (isValid(validIp[<span class="number">2</span>]) &amp;&amp; isValid(validIp[<span class="number">3</span>])) &#123;</span><br><span class="line">                        ans.add(join(validIp));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(1); Space complexity: O(1)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Strings</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.13 Longest Palindromic Substring</title>
    <url>/panaceacode.github.io/2020/04/08/Alg-13-Longest-Palindromic-Substring/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>Previous problem explains what is a palindrome string, in this problem, we will write a function to find out the longest palindromic substring within a given string.</em><br><br><em>In the solution, we consider each character as a center of a potential palindrome, however, when a string contains even number elements, the center should contains 2 characters. So, we write a function to find longest palindrome given a center.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] findLPS(String str, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; str.length()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(left) != str.charAt(right)) <span class="keyword">break</span>;</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;left + <span class="number">1</span>, right&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Now, we iterate the string, find its longest palindromic substring</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longestPalindromicSubstring</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] ans = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] odd = findLPS(str, i - <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span>[] even = findLPS(str, i - <span class="number">1</span>, i);</span><br><span class="line">            <span class="keyword">int</span>[] longest = (odd[<span class="number">1</span>] - odd[<span class="number">0</span>]) &gt; (even[<span class="number">1</span>] - even[<span class="number">0</span>]) ? odd : even;</span><br><span class="line">            ans = (longest[<span class="number">1</span>] - longest[<span class="number">0</span>]) &gt; (ans[<span class="number">1</span>] - ans[<span class="number">0</span>]) ? longest : ans;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> str.substring(ans[<span class="number">0</span>], ans[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n^2); Space complexity: O(n)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Strings</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.14 Group Anagrams</title>
    <url>/panaceacode.github.io/2020/04/09/Alg-14-Group-Anagrams/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>Anagrams are strings made up of exactly the same letters, in this problem, we need to write a function that takes in an array of strings and groups anagrams together. Here is an example:</em><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Algorithm/Group%20Anagrams.png" width="73%" height="73%" align="middle" /><br><br><em>In the solution, we iterate the original string array, we use Arrays.sort() to sort each string, then store the sorted string and original string into a map. Here is the code implementation:</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(List&lt;String&gt; words) &#123;</span><br><span class="line">    </span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; anagrams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] charArray = word.toCharArray();</span><br><span class="line">            Arrays.sort(charArray);</span><br><span class="line">            String sortedWord = <span class="keyword">new</span> String(charArray);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (anagrams.containsKey(sortedWord)) anagrams.get(sortedWord).add(word);</span><br><span class="line">            <span class="keyword">else</span> anagrams.put(sortedWord, <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(word)));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; value : anagrams.values()) &#123;</span><br><span class="line">            ans.add(value);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>For time complexity: we need to sort each string, w<em>n</em>logn; Space complexity is pretty straightforward, wn. (w is the number of words, n is the length of the longest string)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Strings</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.17 Longest Substring Without Duplication</title>
    <url>/panaceacode.github.io/2020/04/10/Alg-17-Longest-Substring-Without-Duplication/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>In this problem, we need to write a function to find out the longest substring without any duplicate characters.</em><br><br><em>We iterate the original string and use a map to record the characters and their corresponding positions. Array “longest” stores the index of the current longest substring, “startIdx” is the current start point of a potential longest substring. When we get to a character, we determine whether we have met it before and if it appears after the current head, we can update the current “startIdx” according to this rule. Then we can update the “longest” by comparing the lengths of current potential longest substring and “longest”. Here is the code implementation:</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longestSubstringWithoutDuplication</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] longest = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> startIdx = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Use a map to record the characters and its corresponding position</span></span><br><span class="line">        Map&lt;Character, Integer&gt; table = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="comment">// If the character we have Encountered before</span></span><br><span class="line">            <span class="keyword">if</span> (table.containsKey(str.charAt(i))) &#123;</span><br><span class="line">                <span class="comment">// If this character appears after the current head,</span></span><br><span class="line">                <span class="comment">// we update the head</span></span><br><span class="line">                <span class="keyword">if</span> (table.get(str.charAt(i)) + <span class="number">1</span> &gt;= startIdx) &#123;</span><br><span class="line">                    startIdx = table.get(str.charAt(i)) + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            table.put(str.charAt(i), i);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Update the current longest substring</span></span><br><span class="line">            <span class="keyword">if</span> (i - startIdx + <span class="number">1</span> &gt; longest[<span class="number">1</span>] - longest[<span class="number">0</span>]) &#123;</span><br><span class="line">                longest[<span class="number">0</span>] = startIdx;</span><br><span class="line">                longest[<span class="number">1</span>] = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> str.substring(longest[<span class="number">0</span>], longest[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n); Space complexity:O(n)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Strings</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.19 Pattern Matcher</title>
    <url>/panaceacode.github.io/2020/04/12/Alg-19-Pattern-Matcher/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>We’re given 2 non-empty strings. The first one is a pattern consisting of only “x” and “y”, the other one is a normal string of alphanumeric characters. Write a function that checks whether the normal string matches the pattern. Here is a sample:</em><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Algorithm/Pattern%20Matcher.png" width="73%" height="73%" align="middle" /><br><br><em>First, we need a function to transform the pattern like “yyxx” into “xxyy”.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * To make the process more straightforward, we transform all </span></span><br><span class="line"><span class="comment">     * the patterns like &quot;yyxx&quot; into &quot;xxyy&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">transform</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pattern.charAt(<span class="number">0</span>) == <span class="string">&#x27;x&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> pattern;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            StringBuilder trans = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pattern.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pattern.charAt(i) == <span class="string">&#x27;x&#x27;</span>) &#123;</span><br><span class="line">                    trans.append(<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    trans.append(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> trans.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><em>Then, we need a function to get first y’s position and the number of x and y.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get first y&#x27;s position and count the number of &quot;x&quot; and &quot;y&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getYPos</span><span class="params">(Map&lt;Character, Integer&gt; map, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> yPos = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pattern.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = pattern.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (pattern.charAt(i) == <span class="string">&#x27;y&#x27;</span> &amp;&amp; yPos == -<span class="number">1</span>) &#123;</span><br><span class="line">                yPos = i;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(c, map.get(c) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> yPos;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><em>Here is the function that we can generate the potential match string according to the pattern, x and y.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the potential match string according to &quot;pattern&quot;, &quot;x&quot; and &quot;y&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">buildPotentialString</span><span class="params">(String pattern, String x, String y)</span> </span>&#123;</span><br><span class="line">        StringBuilder potential = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pattern.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = pattern.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;x&#x27;</span>) &#123;</span><br><span class="line">                potential.append(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                potential.append(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> potential.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><em>We can solve the problem now, here is the main function.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] patternMatcher(String pattern, String str) &#123;</span><br><span class="line">        String trans = transform(pattern); <span class="comment">// Transform the given pattern</span></span><br><span class="line">        <span class="keyword">boolean</span> wasChanged = trans.charAt(<span class="number">0</span>) != pattern.charAt(<span class="number">0</span>);</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&#x27;x&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;y&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> yPos = getYPos(map, trans); <span class="comment">// Get first y&#x27;s position and number of x and y</span></span><br><span class="line">        <span class="keyword">int</span> xNum = map.get(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">        <span class="keyword">int</span> yNum = map.get(<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (yPos != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> xLen = <span class="number">1</span>; xLen &lt; str.length(); xLen++) &#123;</span><br><span class="line">                <span class="comment">// Use double to store y&#x27;s length so that we can determine whether it&#x27;s valid</span></span><br><span class="line">                <span class="keyword">double</span> yLen = ((<span class="keyword">double</span>)str.length() - (<span class="keyword">double</span>)xLen * (<span class="keyword">double</span>)xNum) / (<span class="keyword">double</span>)yNum;</span><br><span class="line">                <span class="keyword">if</span> (yLen &lt;= <span class="number">0</span> || yLen % <span class="number">1</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> yIdx = yPos * xLen;</span><br><span class="line">                String x = str.substring(<span class="number">0</span>, xLen);</span><br><span class="line">                String y = str.substring(yIdx, yIdx + (<span class="keyword">int</span>)yLen);</span><br><span class="line">                String potentialMatch = buildPotentialString(trans, x, y);</span><br><span class="line">                <span class="keyword">if</span> (str.equals(potentialMatch)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> wasChanged ? <span class="keyword">new</span> String[] &#123;y, x&#125; : <span class="keyword">new</span> String[] &#123;x, y&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">double</span> xLen = str.length() / xNum;</span><br><span class="line">            <span class="keyword">if</span> (xLen % <span class="number">1</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                String x = str.substring(<span class="number">0</span>, (<span class="keyword">int</span>)xLen);</span><br><span class="line">                String potentialMatch = buildPotentialString(trans, x, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (str.equals(potentialMatch)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> wasChanged ? <span class="keyword">new</span> String[] &#123;<span class="string">&quot;&quot;</span>, x&#125; : <span class="keyword">new</span> String[] &#123;x, <span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n^2 + m); Space complexity: O(n + m).</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Strings</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.18 Underscorify Substring</title>
    <url>/panaceacode.github.io/2020/04/11/Alg-18-Underscorify-Substring/</url>
    <content><![CDATA[<p><em>For this problem, we need to write a function to wrap every potential substring with underscores in the main string. Here is an example:</em><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Algorithm/Underscoring%20Substring.png" width="73%" height="73%" align="middle" /><br><br><em>First, we need to get every exsiting substring’s position.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer[]&gt; getLocation(String str, String substring) &#123;</span><br><span class="line">        <span class="keyword">int</span> substringLen = substring.length();</span><br><span class="line">        List&lt;Integer[]&gt; locations = <span class="keyword">new</span> ArrayList&lt;Integer[]&gt;();</span><br><span class="line">        <span class="keyword">int</span> Idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (Idx &lt; str.length()) &#123;</span><br><span class="line">        <span class="comment">// Find the start point of one substring </span></span><br><span class="line">            <span class="keyword">int</span> curIdx = str.indexOf(substring, Idx);</span><br><span class="line">            <span class="keyword">if</span> (curIdx != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// add this substring&#x27;s start and end positions to the result list</span></span><br><span class="line">                locations.add(<span class="keyword">new</span> Integer[] &#123;curIdx, curIdx + substringLen&#125;);</span><br><span class="line">                Idx = curIdx + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locations;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><em>Then, we need to collapse the substring’s position collection.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer[]&gt; collapse(List&lt;Integer[]&gt; locations) &#123;</span><br><span class="line">        <span class="keyword">if</span> (locations.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> locations;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer[]&gt; transLocations = <span class="keyword">new</span> ArrayList&lt;Integer[]&gt;();</span><br><span class="line">        transLocations.add(locations.get(<span class="number">0</span>));</span><br><span class="line">        Integer[] prev = transLocations.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; locations.size(); i++) &#123;</span><br><span class="line">            Integer[] cur = locations.get(i);</span><br><span class="line">            <span class="keyword">if</span> (cur[<span class="number">0</span>] &lt;= prev[<span class="number">1</span>]) &#123;</span><br><span class="line">                prev[<span class="number">1</span>] = cur[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                transLocations.add(cur);</span><br><span class="line">                prev = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> transLocations;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><em>Now, we can use underscores to wrap each substrings.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">underscorify</span><span class="params">(String str, List&lt;Integer[]&gt; locations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> strIdx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> locationsIdx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> inBetween = <span class="keyword">false</span>;</span><br><span class="line">        List&lt;String&gt; finalString = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (strIdx &lt; str.length() &amp;&amp; locationsIdx &lt; locations.size()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strIdx == locations.get(locationsIdx)[i]) &#123;</span><br><span class="line">                finalString.add(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">                inBetween = !inBetween;</span><br><span class="line">                <span class="keyword">if</span> (!inBetween) &#123;</span><br><span class="line">                    locationsIdx++;</span><br><span class="line">                &#125;</span><br><span class="line">                i = i == <span class="number">1</span>? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            finalString.add(String.valueOf(str.charAt(strIdx)));</span><br><span class="line">            strIdx++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (locationsIdx &lt; locations.size()) &#123;</span><br><span class="line">            finalString.add(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strIdx &lt; str.length()) &#123;</span><br><span class="line">            finalString.add(str.substring(strIdx));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">&quot;&quot;</span>, finalString);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">underscorifySubstring</span><span class="params">(String str, String substring)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer[]&gt; finalString = collapse(getLocation(str, substring));</span><br><span class="line">    <span class="keyword">return</span> underscorify(str, finalString);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n+m)(length of the main string and the substring); Space complexity: O(n)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Strings</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.16 Reverse Words In String</title>
    <url>/panaceacode.github.io/2020/04/09/Alg-16-Reverse-Words-In-String/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>In this problem, given a string of words seperated by one or more whitespaces. We need to write a function reverse these words. Basically, the idea is seperate all the words by the whitespaces. Then, we simply reverse them. Here is the implementation:</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverseWordsInString</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; words = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> curStart = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; string.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = string.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c  == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                words.add(string.substring(curStart, i));</span><br><span class="line">                words.add(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                curStart = i + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        words.add(string.substring(curStart));</span><br><span class="line">        Collections.reverse(words);</span><br><span class="line">    <span class="keyword">return</span> String.join(<span class="string">&quot;&quot;</span>, words);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><em>Another way is to first reverse all the characters within this string, then we reverse each string back.</em><br><br>Time complexity: O(n); Space complexity: O(n)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Strings</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.20 Knutt-Morris-Pratt Algorithm</title>
    <url>/panaceacode.github.io/2020/04/13/Alg-20-Knutt-Morris-Pratt-Algorithm/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>Knutt-Morris-Pratt Algorithm, known as KMP, is a famous algorithm to solve substring problem. Given a string and a substring, we are supposed to determine whether the string contains the substring.</em><br><br><em>Usually, when we try to solve the substring problem, we may iterate the original string and check if it matches. In KMP algorithm, we can skip all the unnecessary compare and acclerate this process. For example, check if “aef aef aef aed aef aed aef aef” contains “aef aed aef aef”, we will encounter a match failure when we compare the second “f” in string and the first “d” in substring. Here, we may want start another round from second “aef” instead of the second character in the string. First, for each character of the substring, we need to find the nearest restart pointer when we meet a failure in matching:</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generatePattern(String substring) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] pattern = <span class="keyword">new</span> <span class="keyword">int</span>[substring.length()];</span><br><span class="line">    Arrays.fill(pattern, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; substring.length();) &#123;</span><br><span class="line">        <span class="keyword">if</span> (substring.charAt(i) == substring.charAt(j)) &#123;</span><br><span class="line">            pattern[i] = j;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            j = pattern[j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pattern;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Now, we can start the match process.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">doesMatch</span><span class="params">(String string, String substring, <span class="keyword">int</span>[] pattern)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// Main string idx</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>; <span class="comment">// Substring idx</span></span><br><span class="line">    <span class="keyword">while</span> (i + substring.length() - j &lt;= string.length()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (string.charAt(i) == substring.charAt(j)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == substring.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            j = pattern[j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">knuthMorrisPrattAlgorithm</span><span class="params">(String string, String substring)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span>[] pattern = generatePattern(substring);</span><br><span class="line">  <span class="keyword">return</span> doesMatch(string, substring, pattern);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n + m); Space complexity: O(m) for the extra special pattern.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.2 Validate Subsequence</title>
    <url>/panaceacode.github.io/2020/04/04/Alg-2-Validate-Subsequence/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>Write a function that determines whether “sequence” array is a subsequence of “array” array. For example, [1, 6, -1, 10] is a subsequence of [5, 1, 22, 25, 6, -1, 8, 10]</em><br><br><em>First, we iterate “array”, at the same time, we use a pointer to track the current position of “sequence”. If the value of “array” equals the value of current “sequence”, “sequence”‘s pointer will increment by 1. When we finish the iteration, we only need to compare the length of “sequence” and “sequence”‘s pointer.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValidSubsequence</span><span class="params">(List&lt;Integer&gt; array, List&lt;Integer&gt; sequence)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Write your code here.</span></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == sequence.size()) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (array.get(i) == sequence.get(j)) j++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> j == sequence.size();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n); Space complexity: O(1)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Arrays</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.22 Min Height BST</title>
    <url>/panaceacode.github.io/2020/05/10/Alg-22-Min-Height-BST/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>Given a sorted array (each element is distinct), write a function to construct a BST with min height.</em><br><br><em>Here is the structure of BST, and we provide a  insert function which can insert an element to a given BST in O(logn).</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">  <span class="keyword">public</span> BST left;</span><br><span class="line">  <span class="keyword">public</span> BST right;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BST</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    left = <span class="keyword">null</span>;</span><br><span class="line">    right = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="keyword">this</span>.value) &#123;</span><br><span class="line">      <span class="keyword">if</span> (left == <span class="keyword">null</span>) &#123;</span><br><span class="line">        left = <span class="keyword">new</span> BST(value);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        left.insert(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (right == <span class="keyword">null</span>) &#123;</span><br><span class="line">        right = <span class="keyword">new</span> BST(value);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right.insert(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>The basic idea is: try to allocate the elements evenly, since the array is sorted, we try to make the left and right subtree have the same amount of elements. So, we can let the middle point be the root node, and repeat this operation on the left and right subtree recursively. In the solution, we call the minHeightBstHelper function recursively.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BST <span class="title">minHeightBst</span><span class="params">(List&lt;Integer&gt; array)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> minHeightBstHelper(array, <span class="number">0</span>, array.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>Here is one solution with the given insert function.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BST <span class="title">minHeightBstHelper</span><span class="params">(List&lt;Integer&gt; array, BST bst, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> midIdx = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = array.get(midIdx);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (bst == <span class="keyword">null</span>) bst = <span class="keyword">new</span> BST(mid);</span><br><span class="line">    <span class="keyword">else</span> bst.insert(mid);</span><br><span class="line">    minHeightBstHelper(array, bst, start, midIdx - <span class="number">1</span>);</span><br><span class="line">    minHeightBstHelper(array, bst, midIdx + <span class="number">1</span>, end);</span><br><span class="line">  <span class="keyword">return</span> bst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(nlogn); Space complexity: O(n).<br></p>
<p><em>Now, we can implement our own insert operation, in this case, this solution will be completed in O(n).</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BST <span class="title">minHeightBstHelper</span><span class="params">(List&lt;Integer&gt; array, BST bst, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> midIdx = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = array.get(midIdx);</span><br><span class="line">    BST newNode = <span class="keyword">new</span> BST(mid);</span><br><span class="line">    <span class="keyword">if</span> (bst == <span class="keyword">null</span>) &#123;</span><br><span class="line">        bst = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bst.value &gt; mid) &#123;</span><br><span class="line">        bst.left = newNode;</span><br><span class="line">        bst = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        bst.right = newNode;</span><br><span class="line">        bst = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    minHeightBstHelper(array, bst, start, midIdx - <span class="number">1</span>);</span><br><span class="line">    minHeightBstHelper(array, bst, midIdx + <span class="number">1</span>, end);</span><br><span class="line">    <span class="keyword">return</span> bst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n); Space complexity: O(n).<br></p>
<p><em>The third way is a simplified version of the second way.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BST <span class="title">minHeightBstHelper</span><span class="params">(List&lt;Integer&gt; array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> midIdx = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = array.get(midIdx);</span><br><span class="line">    BST bst = <span class="keyword">new</span> BST(mid);</span><br><span class="line">    bst.left = minHeightBstHelper(array, start, midIdx - <span class="number">1</span>);</span><br><span class="line">    bst.right = minHeightBstHelper(array, midIdx + <span class="number">1</span>, end);</span><br><span class="line">    <span class="keyword">return</span> bst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n); Space complexity: O(n).<br></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.21 BST Construction</title>
    <url>/panaceacode.github.io/2020/05/10/Alg-21-BST-Construction/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br></p>
<blockquote>
<p>Definition of a valid Binary Search Tree: its value is strictly greater than its left node; its value is less than or equal to its right node; its children nodes are either valid BST node or <strong>null</strong>.</p>
</blockquote>
<p>Write a <strong>BST</strong> class for a Binary Search Tree. The class supports 3 functions:</p>
<ol>
<li><strong>insert</strong>: insert a node with given value;</li>
<li><strong>remove</strong>: remove a node, only remove first instance of a given value;</li>
<li><strong>contains</strong>: search with a given value.</li>
</ol>
<p><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Algorithm/BST%20Construction.png" width="73%" height="73%" align="middle" /><br></p>
<p><em>Here are the structure of the code implementations:</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Program</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> BST left;</span><br><span class="line">    <span class="keyword">public</span> BST right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BST</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BST <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BST <span class="title">remove</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Do not edit the return statement of this method.</span></span><br><span class="line">      remove(value, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>For <strong>insert</strong> function: we can either use recursion way or iteration way to find the expecting location of the given node. For the most cases, the BST will be assumed as balanced, but when the tree is skewed, we have the worst case, and the insert process will be completed within O(n). If we use recursion here, the average space complexity will also be O(logn) since we have to use the call stacks, the worst space complexity is O(n), too.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BST <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    BST current = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value &gt;= current.value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                current.right = <span class="keyword">new</span> BST(value);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = current.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">                current.left = <span class="keyword">new</span> BST(value);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = current.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: average: O(logn), worst: O(n); <br><br>Space complexity: O(1).<br></p>
<p><em>For the <strong>contains</strong> function, it is much simpler than the <strong>insert</strong> function. Also, the time&amp;space analysis of the recursion version is the same as <strong>insert</strong> function.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    BST current = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.value &gt; value) &#123;</span><br><span class="line">            current = current.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current.value &lt; value) &#123;</span><br><span class="line">                current = current.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: average: O(logn), worst: O(n); <br><br>Space complexity: O(1).<br></p>
<p><em><strong>remove</strong> function is much more difficult than the other 2 to implement, there are so many edge cases to consider, let’s dig into the code implementation.</em><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Algorithm/BST%20construction%20remove.png" width="73%" height="73%" align="middle" /><br><br><em>Here is the iteration version, first of all, we need to keep track on the parent node of the current node. From the figure above, when we find the node that we want to delete, there are several conditions:</em><br></p>
<ol>
<li>The node has left and right children nodes, whether it is a root node, we can make its right branch’s smallest node replace it;</li>
<li>The node has 1 or 0 children node and it is a root node, when it has only 1 children node, we use its children node to replace it; when it has no children node, we just leave it there and do nothing;</li>
<li>The node has 1 or 0 children node and it is not a root node, we just use its children node or null to replace its place.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> value, BST parent)</span> </span>&#123;</span><br><span class="line">    BST current = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.value &gt; value) &#123;</span><br><span class="line">            parent = current;</span><br><span class="line">            current = current.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current.value &lt; value) &#123;</span><br><span class="line">            parent = current;</span><br><span class="line">            current = current.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.left != <span class="keyword">null</span> &amp;&amp; current.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                current.value = current.right.getMinValue();</span><br><span class="line">                current.right.remove(current.value, current);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (current.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// The order here is very important, since we can&#x27;t update</span></span><br><span class="line">                    <span class="comment">// the left branch first</span></span><br><span class="line">                    current.value = current.left.value;</span><br><span class="line">                    current.right = current.left.right;</span><br><span class="line">                    current.left = current.left.left;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    current.value = current.right.value;</span><br><span class="line">                    current.left = current.right.left;</span><br><span class="line">                    current.right = current.right.right;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(parent.left == current) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.left != <span class="keyword">null</span>) parent.left = current.left;</span><br><span class="line">            <span class="keyword">else</span> parent.left = current.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(parent.right == current) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.left != <span class="keyword">null</span>) parent.right = current.left;</span><br><span class="line">            <span class="keyword">else</span> parent.right = current.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getMinValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BST current = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">while</span> (current.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">        current = current.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
Time complexity: average: O(logn), worst: O(n); <br><br>Space complexity: O(1).<br></li>
</ol>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.23 Find Closest Value In BST</title>
    <url>/panaceacode.github.io/2020/05/11/Alg-23-Find-Closest-Value-In-BST/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>Write a function to find the closest value of the target number in a BST. Here is an example:</em><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Algorithm/Find%20Closest%20Value%20in%20BST.png" width="73%" height="73%" align="middle" /><br><br><em>The BST structure:</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">  <span class="keyword">public</span> BST left;</span><br><span class="line">  <span class="keyword">public</span> BST right;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BST</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>There are 2 ways: recursion and iteration. They both complete in O(logn) time, the difference between them is the space complexity, since the recursion way needs to use call stack, its time complexity is O(logn)(average) or O(n)(worst) while the iteration way performs O(1) in space. Here is the iteration way:</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findClosestValueInBst</span><span class="params">(BST tree, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// If we initialize the closest value with MAX/MIN value of integer,</span></span><br><span class="line">    <span class="comment">// there may exist problems!</span></span><br><span class="line">    BST current = tree;</span><br><span class="line">    <span class="keyword">int</span> closest = current.value;</span><br><span class="line">    <span class="keyword">int</span> closestDiff = Math.abs(closest - target);</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(current.value - target) &lt; closestDiff) &#123;</span><br><span class="line">            closest = current.value;</span><br><span class="line">            closestDiff = Math.abs(closest - target);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (current.value &gt; target) &#123;</span><br><span class="line">            current = current.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current.value &lt; target) &#123;</span><br><span class="line">            current = current.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> closest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: average: O(logn), worst: O(n); <br><br>Space complexity: O(1).<br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findClosestValueInBst</span><span class="params">(BST tree, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> helper(tree, target, tree.value);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(BST tree, <span class="keyword">int</span> target, <span class="keyword">int</span> closest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Math.abs(tree.value - target) &lt; Math.abs(closest - target)) &#123;</span><br><span class="line">        closest = tree.value;</span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (tree.value &gt; target &amp;&amp; tree.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> helper(tree.left, target, closest);</span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (tree.value &lt; target &amp;&amp; tree.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> helper(tree.right, target, closest);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> closest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: average: O(logn), worst: O(n); <br><br>Space complexity: average: O(logn), worst: O(n).<br></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.24 Validate BST</title>
    <url>/panaceacode.github.io/2020/05/11/Alg-24-Validate-BST/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>Write a function to check whether a tree is a BST.</em><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Algorithm/Validate%20BST.png" width="73%" height="73%" align="middle" /><br><br><em>For this problem, each node has a minimum and maximum bound, a right node shall be equal to or greater than its parent, a left node shall be smaller than its parent.</em><br><br><em>Here is the code implementation:</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateBst</span><span class="params">(BST tree)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> helper(tree, Integer.MIN_VALUE, Integer.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(BST tree, <span class="keyword">int</span> min, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree.value &lt; min || tree.value &gt;= max) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tree.left != <span class="keyword">null</span> &amp;&amp; !helper(tree.left, min, tree.value)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tree.right != <span class="keyword">null</span> &amp;&amp; !helper(tree.right, tree.value, max)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n); Space complexity: O(logn).</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.25 BST Traversal</title>
    <url>/panaceacode.github.io/2020/05/11/Alg-25-BST-Traversal/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>This one will uses 3 ways to traverse a BST (in-order/pre-order/post-order), the code implementation is pretty straightforward:</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">inOrderTraverse</span><span class="params">(BST tree, List&lt;Integer&gt; array)</span> </span>&#123;</span><br><span class="line">      BST current = tree;</span><br><span class="line">      <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">          inOrderTraverse(current.left, array);</span><br><span class="line">          array.add(current.value);</span><br><span class="line">          inOrderTraverse(current.right, array);</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">preOrderTraverse</span><span class="params">(BST tree, List&lt;Integer&gt; array)</span> </span>&#123;</span><br><span class="line">      BST current = tree;</span><br><span class="line">      <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">          array.add(current.value);</span><br><span class="line">          preOrderTraverse(current.left, array);</span><br><span class="line">          preOrderTraverse(current.right, array);</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">postOrderTraverse</span><span class="params">(BST tree, List&lt;Integer&gt; array)</span> </span>&#123;</span><br><span class="line">      BST current = tree;</span><br><span class="line">      <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">          postOrderTraverse(current.left, array);</span><br><span class="line">          postOrderTraverse(current.right, array);</span><br><span class="line">          array.add(current.value);</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n); Space complexity: O(n).</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.4 Kadane&#39;s Algorithm</title>
    <url>/panaceacode.github.io/2020/04/05/Alg-4-Kadane-s-Algorithm/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>In this problem, we have to write a function to get a given array’s maximum sum of its subarray. So, in this case, Kadane’s Algorithm would be an efficient option for this one.</em><br><br><em>Assume we have an non-empty array, “array”, first, we need to iterate this array,  use a variable “currentSum” to record the current maximum sum. Obviouly, the maximum sum would be either the current element array[i] or ans + array[i]. We almost finish this problrm here, the last thing we need to do is to find the biggest “currentSum” while we iterate this array.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">kadanesAlgorithm</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array.length == <span class="number">1</span>) <span class="keyword">return</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> ans = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> currentSum = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            currentSum = Math.max(array[i], currentSum + array[i]);</span><br><span class="line">            ans = Math.max(currentSum, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n); Space complexity: O(1)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Arrays</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.3 Remove Duplicates From Linked List</title>
    <url>/panaceacode.github.io/2020/04/04/Alg-3-Remove-Duplicates-From-Linked-List/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>GIven a singly linked list, their nodes are sorted with respect to their value. Write a function to remove the nodes with duplicate values.</em><br><br><em>This method is pretty straightforward</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> LinkedList <span class="title">removeDuplicatesFromLinkedList</span><span class="params">(LinkedList linkedList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Write your code here.</span></span><br><span class="line">        LinkedList current = linkedList;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">            LinkedList next = current.next;</span><br><span class="line">            <span class="keyword">while</span> (next != <span class="keyword">null</span> &amp;&amp; current.value == next.value) &#123;</span><br><span class="line">                next = next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current.next = next;</span><br><span class="line">            current = next;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> linkedList;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n); Space complexity: O(1)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Linked Lists</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.5 Bubble Sort</title>
    <url>/panaceacode.github.io/2020/04/05/Alg-5-Bubble-Sort/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>Bubble Sort is probably the first sorting algorithm we learned when we study algorithm. In this problem, we will use Bubble Sort to sort the given arrays. What’s more, we will find potential method to make Bubble Sort more efficient.</em><br><br><em>First, in this problem and future problems which are related to sorting algorithm, we may need to swap elements.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><em>Then, we will apply Bubble Sort to solve this problem. Basically, in Bubble Sort, we need to iterate the original array n times which is its length to determine each element’s position. Here, we will use a little trick to end some unnecessary iterations. In a certain iteration, if there is no swap, it means all the elements are in the expecting positions.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    <span class="comment">// Write your code here.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(array, j, j + <span class="number">1</span>);</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) <span class="keyword">return</span> array;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n^2); Space complexity: O(1)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.6 Insertion Sort</title>
    <url>/panaceacode.github.io/2020/04/05/Alg-6-Insertion-Sort/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br ><br><em>We apply Insertion Sort to sort the given arrays. For the Insertion Sort, we basically separate the original array into 2 parts, “ordered” one and “disordered” one. First, we iterate the array from the second element if the length of the original array is no less than 2. Tha idea is we pick a element from the “disordered” collection, find the expecting position in the “ordered” one, then insert the element into the “ordered” one.</em><br><br><em>Here are the code implementations, two ways are basically apply the same conception.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertionSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    <span class="comment">// Write your code here.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> value = array[i];</span><br><span class="line">            <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j] &gt; value) array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            array[j + <span class="number">1</span>] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n^2); Space complexity: O(1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertionSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    <span class="comment">// Write your code here.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i - <span class="number">1</span>] &gt; array[i]) &#123;</span><br><span class="line">                    swap(array, i, i - <span class="number">1</span>);</span><br><span class="line">                    i--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n^2); Space complexity: O(1)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.7 Selection Sort</title>
    <url>/panaceacode.github.io/2020/04/06/Alg-7-Selection-Sort/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>Selection Sort is pretty much like the Insertion Sort. We divide the original array into two parts, “ordered” and “disordered”. But for Selection Sort, we will find the smallest number in the “disordered” part, and insert that number into “ordered” one. That’s why we called it Selection Sort.</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectionSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    <span class="comment">// Write your code here.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> minIndex = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; array.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j] &lt; array[minIndex]) minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(array, i, minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: O(n^2); Space complexity: O(1)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.8 Quick Sort</title>
    <url>/panaceacode.github.io/2020/04/07/Alg-8-Quick-Sort/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>Quick Sort is a widely-used sorting algorithm, it borrows the strategy, “Divide and Conquer”, to divide the original array into 2 parts and do the sorting recursively. Here are the steps of Quick Sort:</em><br><br><em>1. Select a pivot, there are a lot of strategies to pick a pivot in order to make sure we can seperate the original array evenly. But here, we simply pick the first elements as pivots</em><br><br><em>2. Divide the original array into 2 parts, each element of the first one is less than or equals pivot, each element in the second one is greater than pivot</em><br><br><em>3. Repeat 1 and 2 on the subarrays</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSortHelper</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> startIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (startIndex &gt;= endIndex) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> pivot = array[startIndex];</span><br><span class="line">        <span class="keyword">int</span> left = startIndex + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = endIndex;</span><br><span class="line">        <span class="keyword">while</span> (right &gt;= left) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[left] &gt; pivot &amp;&amp; array[right] &lt; pivot) &#123;</span><br><span class="line">                swap(array, left, right);</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (array[left] &lt;= pivot) left++;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (array[right] &gt;= pivot) right--;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(array, right, startIndex);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Here&#x27;s a optimization: In order to run faster, we always want run the subarray</span></span><br><span class="line">        <span class="comment">// with shorter length, therefore, the memory of call stack will be released.</span></span><br><span class="line">        <span class="keyword">if</span> (right - <span class="number">1</span> - startIndex &lt; endIndex - right - <span class="number">1</span>) &#123;</span><br><span class="line">            quickSortHelper(array, startIndex, right - <span class="number">1</span>);</span><br><span class="line">            quickSortHelper(array, right + <span class="number">1</span>, endIndex);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            quickSortHelper(array, right + <span class="number">1</span>, endIndex);</span><br><span class="line">            quickSortHelper(array, startIndex, right - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">        quickSortHelper(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Since we do the sorting recursively, the space complexity is O(logn)<br><br>For the time complexity, if we can’t seperate the arrays evenly, under its worst condition, the time complexity will be O(n^2). However, under its best and average conditions, the time complexity will be O(logn).</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>Alg.9 Merge Sort</title>
    <url>/panaceacode.github.io/2020/04/07/Alg-9-Merge-Sort/</url>
    <content><![CDATA[<p><em>From algoexpert.io</em><br><br><em>For the Merge Sort, it also uses the conception “Divide and Conquer”. We simply divide the original arrays evenly recursively, then merge them. So, in Merge Sort algorithm, the time and space complexity are pretty stable.</em><br><br><em>Here is the code implementation:</em><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (array.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> array;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] leftSubArray = Arrays.copyOfRange(array, <span class="number">0</span>, array.length / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span>[] rightSubArray = Arrays.copyOfRange(array, array.length / <span class="number">2</span>, array.length);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> mergeTwoArrays(mergeSort(leftSubArray), mergeSort(rightSubArray));</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeTwoArrays(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[arr1.length + arr2.length];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; arr1.length &amp;&amp; j &lt; arr2.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr1[i] &lt;= arr2[j]) ans[k++] = arr1[i++];</span><br><span class="line">            <span class="keyword">else</span> ans[k++] = arr2[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span> (i &lt; arr1.length) ans[k++] = arr1[i++];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (j &lt; arr2.length) ans[k++] = arr2[j++];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>Time complexity: O(logn); Space complexity: O(logn)</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>Belfast</title>
    <url>/panaceacode.github.io/2019/12/21/Belfast/</url>
    <content><![CDATA[<h1 id="2019-12-19"><a href="#2019-12-19" class="headerlink" title="2019/12/19"></a><em>2019/12/19</em></h1><p><em>第一天计划去贝尔法斯特玩，我垚坚持要买早班飞机，结果早上起不来，于是就有了两张机票</em> <br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Belfast/ticket.jpg" width="50%" height="35%" align="bottom" /><br></p>
<p><em>在贝法第一天去了泰坦尼克博物馆，晚上去吃了一个很不错的汉堡。当天晚上有个圣诞集市，贝法的景色还是很不错的</em> <br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Belfast/titanic.jpg" width="50%" height="50%" align="bottom" /><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Belfast/titanic1.jpg" width="50%" height="50%" align="bottom" /><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Belfast/19.jpg" width="50%" height="50%" align="bottom" /><br></p>
<h1 id="2019-12-20"><a href="#2019-12-20" class="headerlink" title="2019/12/20"></a><em>2019/12/20</em></h1><p><em>今天是权游主题观光！！！吃到个超棒的chowder！！！</em> <br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Belfast/got1.JPG" width="50%" height="50%" align="bottom" /><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Belfast/got2.JPG" width="50%" height="50%" align="bottom" /><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Belfast/got3.JPG" width="50%" height="50%" align="bottom" /><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Belfast/got4.JPG" width="50%" height="50%" align="bottom" /><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Belfast/got5.JPG" width="50%" height="50%" align="bottom" /><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Belfast/got6.JPG" width="50%" height="50%" align="bottom" /><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Belfast/got7.JPG" width="50%" height="50%" align="bottom" /><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Belfast/got8.JPG" width="50%" height="50%" align="bottom" /><br></p>
<h1 id="2019-12-21"><a href="#2019-12-21" class="headerlink" title="2019/12/21"></a><em>2019/12/21</em></h1><p><em>最后一天简单逛了一下贝法的女王大学和市政厅，打道回府～</em> <br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Belfast/belfast.JPG" width="50%" height="50%" align="bottom" /><br></p>
]]></content>
      <categories>
        <category>Travel</category>
      </categories>
      <tags>
        <tag>Travel</tag>
        <tag>Belfast</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU Virtualization-Mechanism(Limited Direct Execution)</title>
    <url>/panaceacode.github.io/2020/05/08/CPU-Virtualization-Mechanism-Limited-Direct-Execution/</url>
    <content><![CDATA[<p><em>该节关于底层的进程切换原理，为后面的schedule章节的底层逻辑</em><br></p>
<h3 id="1-Basic-technique-Limited-Direct-Execution"><a href="#1-Basic-technique-Limited-Direct-Execution" class="headerlink" title="1. Basic technique: Limited Direct Execution"></a><em>1. Basic technique: Limited Direct Execution</em></h3><p><em>Conception: run the program directly on the CPU</em><br><br><em>Steps: 1. creates a process entry for it in a process list;</em><br><br><em>2. allocates some memory for it;</em><br><br><em>3. loads the program code into memory (from disk);</em><br><br><em>4. locates its entry point (i.e., the main() routine or something similar), jumps to it, and starts running the user’s code.</em><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/Direct%20Execution%20Protocol.png" width="73%" height="73%" align="middle" /><br><br><em>Here are 2 problems:</em><br><br><em>1.  If we just run a program, how can the OS make sure the program doesn’t do anything that we don’t want it to do, while still running it efficiently?(安全性/security)</em><br><br><em>2. When we are running a process, how does the operating system stop it from running and switch to another process, thus implementing the time sharing we require to virtualize the CPU?(进程切换)</em><br></p>
<h3 id="2-Problem-1-Restricted-Operations"><a href="#2-Problem-1-Restricted-Operations" class="headerlink" title="2. Problem#1: Restricted Operations"></a><em>2. Problem#1: Restricted Operations</em></h3><p><em><strong>User Mode</strong>: code that runs in user mode is restricted in what it can do.</em><br><br><em><strong>Kernel Mode</strong>: code that runs can do what it likes, including privileged operations such as issuing I/O requests and executing all types of restricted instructions.</em><br><br><em>Modern hardware provides the ability for user programs to perform a <strong>system call</strong> which allows the kernel to carefully expose certain key pieces of functionality to user programs, such as accessing the file system, creating and destroying processes, communicating with other processes, and allocating more memory.</em><br><br><em>To execute a system call, a program must execute a special <strong>trap</strong> instruction. This instruction simultaneously:</em><br><br><em>1. jumps into the kernel and raises the privilege level to kernel mode; once in the kernel, the system can now perform whatever privileged operations are needed (if allowed), and thus do the required work for the calling process.</em><br><br><em>2. When finished, the OS calls a special <strong>return-from-trap</strong> instruction, which, as you might expect, returns into the calling user program while simultaneously reducing the privilege level back to user mode.</em><br></p>
<blockquote>
<p><strong>Alert</strong>: The hardware must make sure to save enough of the caller’s registers in order to be able to return correctly when the OS issues the return-from-trap instruction.<br></p>
</blockquote>
<p><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/Limited%20Direct%20Execution%20Protocol.png" width="73%" height="73%" align="middle" /><br><br><em>How does the trap know which code to run inside the OS? Clearly, the calling process can’t specify an address to jump to (as you would when making a procedure call); doing so would allow programs to jump anywhere into the kernel.</em><br><br><em><strong>Trap Table</strong>: When the machine boots up, it does so in privileged (kernel) mode, and thus is free to configure machine hardware as need be. One of the first things the OS thus does is to tell the hardware what code to run when certain exceptional events occur. Being able to execute the instruction to tell the hardware where the trap tables are is a very powerful capability. Thus, it is also a privileged operation.</em><br></p>
<h3 id="3-Problem-2-Switching-Between-Processes"><a href="#3-Problem-2-Switching-Between-Processes" class="headerlink" title="3. Problem#2: Switching Between Processes"></a><em>3. Problem#2: Switching Between Processes</em></h3><blockquote>
<p>A Cooperative Approach: Wait For System Calls<br><br>In this style, the OS trusts the processes of the system to behave reasonably. Processes that run for too long are assumed to periodically give up the CPU so that the OS can decide to run some other task. 这种cooperative的方式需要等待一个系统调用（类似yield）或者一个非法操作将当前线程拉起，切换到kernel模式<br><br><em>1. Most processes transfer control of the CPU to the OS quite frequently by making system calls, for example, to open a file and subsequently read it, or to send a message to another machine, or to create a new process. Systems like this often include an explicit <strong>yield</strong> system call, which does nothing except to transfer control to the OS so it can run other processes.</em><br><em>2. Applications also transfer control to the OS when they do something illegal. For example, if an application divides by zero, or tries to access memory that it shouldn’t be able to access, it will generate a <strong>trap</strong> to the OS. The OS will then have control of the CPU again (and likely terminate the offending process).</em><br><br></p>
</blockquote>
<blockquote>
<p>A Non-Cooperative Approach: The OS Tasks Control<br><br>前一种方法中，如果进程陷入一个无限循环当中，将无法进行线程切换，现在加入<strong>timer interrupt</strong>机制：<br><br>A timer device can be programmed to raise an interrupt every so many milliseconds; when the interrupt is raised, the currently running process is halted, and a pre-configured <strong>interrupt handler</strong> in the OS runs. At this point, the OS has regained control of the CPU, and thus can do what it pleases: stop the current process, and start a different one.<br><br>As we discussed before with system calls, the OS must inform the hardware of which code to run when the timer interrupt occurs; thus, at boot time, the OS does exactly that. Second, also during the boot sequence, the OS must start the timer, which is of course a privileged operation.<br><br>The hardware has some responsibility when an interrupt occurs, in particular to save enough of the state of the program that was running when the interrupt occurred such that a subsequent return-from-trap instruction will be able to resume the running program correctly.<br><br></p>
</blockquote>
<blockquote>
<p>Saving and Restoring Context<br><br><em>无论是cooperative还是non-cooperative的方式，当OS重新取得控制权时，我们需要决定是继续运行当前进程还是切换到另外一个，当我们决定切换到另一个进程时，就需要进行上下文切换(Context Switch)。Context switch: all the OS has to do is save a few register values for the currently-executing process (onto its kernel stack, for example) and restore a few for the soon-to-be-executing process (from its kernel stack). By doing so, the OS thus ensures that when the return-from-trap instruction is finally executed, instead of returning to the process that was running, the system resumes execution of another process. To save the context of the currently-running process, the OS will execute some low-level assembly code to save the general purpose registers, PC, and the kernel stack pointer of the currently-running process, and then restore said registers, PC, and switch to the kernel stack for the soon-to-be-executing process. By switching stacks, the kernel enters the call to the switch code in the context of one process (the one that was in- terrupted) and returns in the context of another (the soon-to-be-executing one). When the OS then finally executes a return-from-trap instruction, the soon-to-be-executing process becomes the currently-running process. And thus the context switch is complete.</em></p>
</blockquote>
<p><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/Limited%20Direct%20Execution%20Protocol%20with%20Timer%20Interrupter.png" width="73%" height="73%" align="middle" /><br><br></p>
<h3 id="4-Worried-About-Concurrency"><a href="#4-Worried-About-Concurrency" class="headerlink" title="4. Worried About Concurrency"></a><em>4. Worried About Concurrency</em></h3><p><em>We also need to consider the concurrency. This part will be discussed on <strong>concurrency</strong>.</em></p>
]]></content>
      <categories>
        <category>Operating System</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU Virtualization-Process API</title>
    <url>/panaceacode.github.io/2020/05/07/CPU-Virtualization-Process-API/</url>
    <content><![CDATA[<h3 id="1-fork-System-Call"><a href="#1-fork-System-Call" class="headerlink" title="1. fork() System Call"></a><em>1. fork() System Call</em></h3><p><em>fork() system call is used to create a new process. One process calls the fork() system call, the process that is created is an (almost) exact copy of the calling process and both are about to return from the fork() system call. The newly-created process doesn’t start running at main().</em><br><br><em>Although it now has its own copy of the address space (i.e., its own private memory), its own registers, its own PC, and so forth, the value it returns to the caller of fork() is different. Specifically, while the parent receives the PID of the newly-created child, the child receives a return code of zero. This differentiation is useful, because it is simple then to write the code that handles the two different cases. The output (of p1.c) is not deterministic. When the child process is created, there are now two active processes in the system that we care about: the parent and the child. Assuming we are running on a system with a single CPU (for simplicity), then either the child or the parent might run at that point.</em><br><br><em>fork()之后，操作系统会复制一个与父进程完全相同的子进程进程共享代码空间，但是数据空间是互相独立的，子进程数据空间中的内容是父进程的完整拷贝，指令指针也完全相同，子进程拥有父进程当前运行到的位置（两进程的程序计数器pc值相同，也就是说，子进程是从fork返回处开始执行的），但有一点不同，如果fork成功，子进程中fork的返回值是0，父进程中fork的返回值是子进程的进程号，如果fork不成功，父进程会返回错误。这两个进程的执行顺序也是不确定的，需要有OS的scheduler来决定。</em><br></p>
<h3 id="2-wait-System-Call"><a href="#2-wait-System-Call" class="headerlink" title="2. wait() System Call"></a><em>2. wait() System Call</em></h3><p><em>It is quite useful for a parent to wait for a child process to finish what it has been doing. It returns the pid of the child process.</em><br></p>
<h3 id="3-exec-System-Call"><a href="#3-exec-System-Call" class="headerlink" title="3. exec() System Call"></a><em>3. exec() System Call</em></h3><p><em>This system call is useful when you want to run a program that is different from the calling program. Given the name of an executable, and some arguments, it loads code (and static data) from that executable and overwrites its current code segment (and current static data) with it; the heap and stack and other parts of the memory space of the program are re-initialized. Thus, it does not create a new process; rather, it transforms the currently running program into a different running program.</em><br></p>
<h3 id="4-Motivation"><a href="#4-Motivation" class="headerlink" title="4. Motivation"></a><em>4. Motivation</em></h3><p><em>The separation of fork() and exec() lets the shell run code after the call to fork() but before the call to exec(); this code can alter the environment of the about-to-be-run program. Here is the steps of using shell:</em><br><br><em>1. It shows you a prompt and then waits for you to type something into it.</em><br><br><em>2. Then type a command (i.e., the name of an executable program, plus any arguments) into it; in most cases, the shell then figures out where in the file system the executable resides.</em><br><br><em>3. Calls fork() to create a new child process to run the command.</em><br><br><em>4. Calls some variant of exec() to run the command, and then waits for the command to complete by calling wait().</em><br><br><em>5. When the child completes, the shell returns from wait() and prints out a prompt again, ready for your next command.</em><br></p>
<h3 id="5-Process-Control-And-Users"><a href="#5-Process-Control-And-Users" class="headerlink" title="5. Process Control And Users"></a><em>5. Process Control And Users</em></h3><p><em>There are other interfaces for interacting with processes in UNIX systems:</em><br><br><em><strong>kill()</strong>: kill() system call is used to send signals to a process, including di- rectives to pause, die, and other useful imperatives.</em><br><br><em><strong>signal()</strong>: signal() system call “catches” various signals, doing so ensures that when a particular signal is delivered to a process, it will suspend its normal execution and run a particular piece of code in response to the signal.</em><br></p>
<h3 id="6-Other-tools"><a href="#6-Other-tools" class="headerlink" title="6. Other tools"></a><em>6. Other tools</em></h3><p><em>1. <strong>ps</strong>: allows you to see which processes are running.</em><br><br><em>2. <strong>top</strong>: displays the processes of the system and how much CPU and other resources they are eating up.</em><br><br><em>3. <strong>kill</strong>: sends arbitrary signals to processes.</em><br><br><em>…</em><br></p>
]]></content>
      <categories>
        <category>Operating System</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU Virtualization-Processes</title>
    <url>/panaceacode.github.io/2020/05/05/CPU-Virtualization-Processes/</url>
    <content><![CDATA[<p><em>Study notes of <strong>Operating System: Three Easy Pieces</strong>(available at <a href="http://www.ostep.org/">http://www.ostep.org</a>)</em><br></p>
<h3 id="1-The-Abstraction-the-Process"><a href="#1-The-Abstraction-the-Process" class="headerlink" title="1. The Abstraction: the Process"></a><em>1. The Abstraction: the Process</em></h3><p><em>This part is about one of the most fundamental abstractions: the process(Informally, it is a running program). Normally, we want to run more than one program at once. The OS provides the illusion of a nearly-endless supply of actual CPUs by virtualizing the CPU(one basic technique is time-sharing <strong>CPU的时分</strong>).</em><br><br><em>To implement virtualization of the CPU, the OS provides both low-level machinery <strong>mechanisms</strong> and high-level intelligence <strong>policies</strong>.</em><br><br><em><strong>Mechanisms</strong>: For example, implementation of the context switch which enables OS to stop running one program and start running another on a given CPU. These are pretty low-level things.</em><br><br><em><strong>Policies</strong>: For example, scheduling policy(which program should the OS run given a number of programs), we can use historical information/workload knowledge/performance metrics to make decision.</em><br><br><em>What constitutes a process? We have to understand its <strong>machine state</strong>:</em><br><br><em>1. <strong>Memory</strong>: Instructions and the data that the running program reads and writes are all in the memory. Thus, the memory that the process can address is part of the process(address space);</em><br><br><em>2. <strong>Registers</strong>: Many instructions explicitly read or update registers. Some are special registers like <strong>program counter(PC)/instruction pointer(IP)</strong> tells us which instruction of the program will execute next. <strong>Stack pointer</strong> and associated <strong>frame pointer</strong> are used to manage the stack for function parameters, local variables and return addresses.</em><br><br><em>3. Programs often access persistent storage devices, I/O information might include a list of the files the process currently has open.</em><br></p>
<h3 id="2-Process-API"><a href="#2-Process-API" class="headerlink" title="2. Process API"></a><em>2. Process API</em></h3><p><em>OS will provide some basic API to manipulate processes:</em><br><br><em>1. <strong>Create</strong>: create new processes.</em><br><br><em>2. <strong>Destroy</strong>: destroy processes forcefully.</em><br><br><em>3. <strong>Wait</strong>: wait for a process to stop running.</em><br><br><em>4. <strong>Miscellaneous Control</strong>: other controls on processes like suspend a process or resume a process.</em><br><br><em>5. <strong>Status</strong>: get some status information about a process such as running time and what status it is in.</em><br></p>
<h3 id="3-Process-Creation"><a href="#3-Process-Creation" class="headerlink" title="3. Process Creation"></a><em>3. Process Creation</em></h3><p><em>1. Load a program’s code and any static data(e.g., initialized variables) into memory, into the address space of the process. Programs initially reside on disk (or, in some modern systems, flash-based SSDs) in some kind of executable format.</em><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/load%20program.png" width="73%" height="73%" align="middle" /><br><br><em>2. Some memory must be allocated for the program’s run-time stack (or just stack). C programs use the stack for local variables, function parameters, and return addresses; the OS allocates this memory and gives it to the process. The OS will also likely initialize the stack with arguments; specifically, it will fill in the parameters to the main() function, i.e., argc and the argv array</em><br><br><em>3. The OS may also allocate some memory for the program’s heap. In C programs, the heap is used for explicitly requested dynamically-allocated data; programs request such space by calling malloc() and free it explicitly by calling free(). The heap is needed for data structures such as linked lists, hash tables, trees, etc.</em><br><br><em>4. The OS will also do some other initialization tasks, particularly as related to input/output (I/O). For example, in UNIX systems, each process by default has three open file descriptors, for standard input, output, and error, these descriptors let programs easily read input from the terminal and print output to the screen.</em><br><br><em>5. Start the program running at the entry point, namely main(). By jumping to the main() routine, the OS transfers control of the CPU to the newly-created process, and thus the program begins its execution.</em><br></p>
<h3 id="4-Process-States"><a href="#4-Process-States" class="headerlink" title="4. Process States"></a><em>4. Process States</em></h3><p><em><strong>Running</strong>: In the running state, a process is running on a processor. This means it is executing instructions.</em><br><br><em><strong>Ready</strong>: In the ready state, a process is ready to run but for some reason the OS has chosen not to run it at this given moment.</em><br><br><em><strong>Blocked</strong>: In the blocked state, a process has performed some kind of operation that makes it not ready to run until some other event takes place. A common example: when a process initiates an I/O request to a disk, it becomes blocked and thus some other process can use the processor.</em><br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/states%20transition.png" width="73%" height="73%" align="middle" /><br></p>
<h3 id="5-Data-Structures"><a href="#5-Data-Structures" class="headerlink" title="5. Data Structures"></a><em>5. Data Structures</em></h3><p><em>To track the state of each process, for example, the OS likely will keep some kind of process list for all processes. People refer to the individual structure that stores information about a process as a <strong>Process Control Block (PCB)</strong>, a fancy way of talking about a C structure that contains information about each process (also sometimes called a process descriptor).</em><br></p>
]]></content>
      <categories>
        <category>Operating System</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU Virtualization-Scheduling(Proportional Share)</title>
    <url>/panaceacode.github.io/2020/05/10/CPU-Virtualization-Scheduling-Proportional-Share/</url>
    <content><![CDATA[<p>在本章中，我们介绍比例份额（proportional-share）调度，有时也称为公平份额（fair-share）调度。比例份额算法基于一个简单的想法：调度程序的最终目标，是确保每个工作获得一定比例的 CPU 时间，而不是优化周转时间和响应时间。例如彩<br>票调度（lottery scheduling）。它的基本思想很简单：每隔一段时间，都会举行一次彩票抽奖，以确定接下来应该运行哪个进程。越是频繁运行的进程，拥有更多赢得彩票的机会。<br></p>
<h3 id="1-Basic-Concept-彩票数表示份额"><a href="#1-Basic-Concept-彩票数表示份额" class="headerlink" title="1. Basic Concept: 彩票数表示份额"></a><em>1. Basic Concept: 彩票数表示份额</em></h3><p>彩票调度/lottery scheduling背后是一个非常基本的概念：彩票数（tickets）代表了进程（或用户或其他）占有某个资源的份额。一个进程拥有的彩票数占总彩票数的百分比，就是它占有资源的份额。假设有两个进程A和B，A拥有75张彩票，B拥有25张。我们希望A占用75%的CPU时间，而B占用25%。通过不断定时地（比如，每个时间片）抽取彩票，彩票调度从概率上（但不是确定的）<br>获得这种份额比例。抽取彩票的过程很简单：调度程序知道总共的彩票数（在我们的例子中，有100张）。调度程序抽取中奖彩票，这是从0和99之间的一个数，拥有这个数对应的彩票的进程中奖。假设进程A拥有0到74共75张彩票，进程B拥有75到99的25张，中奖的彩票就决定了运行A或B。调度程序然后加载中奖进程的状态，并运行它。下面展示一个彩票调度的例子：<br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/Lottery%20E1.png" width="73%" height="73%" align="middle" /><br><br>从这个例子中可以看出，彩票调度中利用了随机性，这导致了从概率上满足期望的比例，但并不能确保。在上面的例子中，工作 B 运行了 20 个时间片中的 4 个，只是占了20%，而不是期望的25%。但是，这两个工作运行得时间越长，它们得到的 CPU 时间比例就会越接近期望。<br></p>
]]></content>
      <categories>
        <category>Operating System</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU Virtualization-Scheduling(The Multi-Level Feedback Queue)</title>
    <url>/panaceacode.github.io/2020/05/10/CPU-Virtualization-Scheduling-The-Multi-Level-Feedback-Queue/</url>
    <content><![CDATA[<p>上一节我们介绍了一些进程调度方法，它们在优化<strong>turnaround time</strong>和<strong>response time</strong>上有不同的思路。这一节要介绍Multi-Level Feedback Queue/多级反馈队列，在不知道进程信息的情况下，我们如何去优化前面介绍的两种衡量标准，如何去优化调度决策。多级反馈队列是个很典型的利用历史记录去做预测的模型，类似的还有分支预测和高速缓存算法。<br></p>
<h3 id="1-MLFQ-Basic-Rules"><a href="#1-MLFQ-Basic-Rules" class="headerlink" title="1. MLFQ: Basic Rules"></a><em>1. MLFQ: Basic Rules</em></h3><p>MLFQ由若干个队列组成，每个队列有不一样的优先级。当一个任务就绪时，它在且只会在其中一个队列当中，MLFQ根据优先级的不同来选择需要运行的任务，当某一队列中存在多个就绪任务时，这些任务使用RR调度算法。所以，这里可以得出两个调度规则：<br></p>
<blockquote>
<p>Rule 1: if Priority(A) &gt; Priority(B), A runs (B doesn’t).</p>
</blockquote>
<blockquote>
<p>Rule 2: if Priority(A) = Priority(B), A &amp; B run in Round-Robin.</p>
</blockquote>
<p>在MLFQ中，优先级的设定是很重要的，当一个任务频繁放弃CPU的话（例如交互式行为，包括键盘等），我们会保持它的高优先级。相对的，如果一个进程是CPU密集型任务，我们会降低它的优先级。当进程运行时，MLFQ会了解每个进程的特性，并利用它们过去的信息预测未来的行为。下面是一个MLFQ示例图：<br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/MLFQ.png" width="73%" height="73%" align="middle" /><br><br>如图所示，任务A、B位于最高优先级队列，C位于中等优先级而D位于最低优先级，按照前两个规则，CPU将会以RR的方式被A、B使用，而C、D将没有机会使用CPU。当然，随着任务的运行，它们的优先级不会一直不变，下面我们将介绍进程的优先级会如何变化。<br></p>
<h3 id="2-尝试-1-如何改变优先级"><a href="#2-尝试-1-如何改变优先级" class="headerlink" title="2. 尝试#1: 如何改变优先级"></a><em>2. 尝试#1: 如何改变优先级</em></h3><p>在这一节我们将讨论如何去改变进程的优先级，首先需要明确的是，在这里，系统中有很多交互型任务，它们可能会频繁地放弃CPU；还有一些任务是CPU密集型，它们可能对Response time的要求不是很高。下面介绍一下优先级改变算法第一次尝试：<br></p>
<blockquote>
<p>Rule 3: 当任务进入调度时，它将会被放置到最高优先级队列当中</p>
</blockquote>
<blockquote>
<p>Rule 4a: 当一个任务在运行时消耗完整个时间片，它的优先级将会被降低（移动到下一个队列）</p>
</blockquote>
<blockquote>
<p>Rule 4b: 当一个任务在消耗完当前时间片前放弃了CPU，它将保留当前优先级</p>
</blockquote>
<ol>
<li><p>Example 1: A Single Long-Running Job<br>下图为一个Long-Running任务，调度器为一个有三个不同优先级队列的MLFQ：<br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/MLFQ%20E1.png" width="73%" height="73%" align="middle" /><br><br>当该任务进入系统调度时，会进入最高优先级Q2，在消耗完一个完整时间片后，它的优先级降低到Q1，最后它的优先级降低到Q0，并在Q0完成剩余任务。<br></p>
</li>
<li><p>Example 2: Along Came A Short Job<br>下图中有两个任务A、B，A是long-running job(CPU intensively)，B是short-running job(interactive)，假设A已经运行了一段时间，B在T=100时进入，此时，B将进入最高优先级的队列，因为B的运行时间较短，它在到达最低优先级队列之前就完成了，之后A就恢复运行。<br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/MLFQ%20E2.png" width="73%" height="73%" align="middle" /><br><br>在这个MLFQ中，我们可以看出它的设计初衷，当一个任务进入调度时，我们不知道它的预期运行时间是多少，但我们假设它的运行时间较短并给予它较高的优先级，这样就会有两种情况：一、它的运行时间真的较短，并在较高优先级时完成运行；二、它实际为一个运行时间较长的任务，在运行一段时间后进入较低优先级的队列<br></p>
</li>
<li><p>Example 3: What About I/O?<br>下面是一个带I/O的例子，任务B会使用CPU 1ms，所以根据Rule 4，因为任务B在时间片被消耗完之前放弃了CPU，它的优先级并不会被降低。所以，MLFQ可以让interactive的任务更快速地完成。<br></p>
</li>
<li><p>Problems With Our Current MLFQ<br>在MLFQ中也存在很多问题，第一，如果系统中存在过多的interactive的任务，它们会一起占用大量的CPU资源，会使一些CPU密集型任务得不到CPU资源；第二、一些程序可能会故意在时间片使用完之前（例如使用了99%的时间片），访问一个无关紧要的文件，这样会使得其放弃CPU，从而可以维持其当前优先级，通过这个方法，某个程序可以一直占用CPU；第三、程序的行为可能会改变，当一个CPU密集型任务需要做一些交互性操作时，当前调度方法无法像处理其他任务一样处理它。<br></p>
</li>
</ol>
<h3 id="3-尝试-2-The-Priority-Boost"><a href="#3-尝试-2-The-Priority-Boost" class="headerlink" title="3. 尝试#2: The Priority Boost"></a><em>3. 尝试#2: The Priority Boost</em></h3><p>为了解决starvation（以上第一点）的问题，我们可以间隔一段时间提升所有任务的优先级，在这里，我们就简单地将所有任务提升到最高优先级的队列当中。所以我们可以得出Rule 5:<br></p>
<blockquote>
<p>Rule 5: 每隔一个时间段S，将系统中所有的任务移到最高优先级的队列当中</p>
</blockquote>
<p>根据这条规则，我们可以一次性解决上面的1、3两个问题，我们可以解决一些长时间运行的CPU密集型任务的<br>starvation，同时当一个CPU密集型任务转变为interactive，在priority boost之后，我们也可以正确处理它。下图为一个例子<br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/MLFQ%20E3.png" width="73%" height="73%" align="middle" /><br><br>在这个例子当中，左边因为没有priority boost，long-running任务会面临starvation的问题，而右图中每隔50ms（实际这个数值有点太小了，这里只是举个例子）会有一个<br>priority boost，最低优先级的任务也有机会获得CPU。在<br>priority boost中，这个时间间隔S是一个较为重要的参量，被称为voo-doo constants，太高的话，long-running jobs会starve；太低的话，interactive jobs会不能合适地分享CPU。<br></p>
<h3 id="4-尝试-3-Better-Accounting"><a href="#4-尝试-3-Better-Accounting" class="headerlink" title="4. 尝试#3: Better Accounting"></a><em>4. 尝试#3: Better Accounting</em></h3><p>如何阻止调度程序被愚弄？可以看出，这里的元凶是规则<br>4a 和 4b，导致工作在时间片以内释放 CPU，就保留它的优先级。这里的解决方案，是为 MLFQ 的每层队列提供更完善的 CPU 计时方式（accounting）。<br>调度程序应该记录一个进程在某一层中消耗的总时间，而不是在调度时重新计时。只要进<br>程用完了自己的配额，就将它降到低一优先级的队列中去。不论它是一次用完的，还是拆<br>成很多次用完。因此，我们重写规则 4a 和 4b。<br></p>
<blockquote>
<p>Rule 4: 一旦工作用完了其在某一层中的时间配额（无论中间主动放弃了多少次<br>CPU），就降低其优先级（移入低一级队列）</p>
</blockquote>
<p>来看一个例子。下图对比了在规则 4a、4b 的策略下（左图），以及在新的规则 4（右<br>图）的策略下，同样试图愚弄调度程序的进程的表现。没有规则 4 的保护时，进程可以在<br>每个时间片结束前发起一次 I/O 操作，从而垄断 CPU 时间。有了这样的保护后，不论进程<br>的 I/O 行为如何，都会慢慢地降低优先级，因而无法获得超过公平的 CPU 时间比例。<br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/MLFQ%20E4.png" width="73%" height="73%" align="middle" /><br></p>
<h3 id="5-MLFQ调优和其他问题"><a href="#5-MLFQ调优和其他问题" class="headerlink" title="5. MLFQ调优和其他问题"></a><em>5. MLFQ调优和其他问题</em></h3><p>关于MLFQ调度算法还有一些问题。其中一个大问题是如何配置一个调度程序，例如，配置多少队列？每一层队列的时间片配置多大？为了避免饥饿问题以及进程行为改变，应该多久提升一次进程的优先级？例如，大多数的MLFQ变体都支持不同队列可变的时间片长度。高优先级队列通常只有较短的时间片（比如10ms或者更少），因而这一层的交互工作可以更快地切换。相反，低优先级队列中更多的是CPU密集型工作，配置更长的时间片会取得更好的效果。下图展示了一个例子，两个长工作在高优先级队列执行10ms，中间队列执行 20ms，最后在最低优先级队列执行 40ms。<br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/MLFQ%20E5.png" width="73%" height="73%" align="middle" /><br></p>
<h3 id="6-MLFQ-Summary"><a href="#6-MLFQ-Summary" class="headerlink" title="6. MLFQ: Summary"></a><em>6. MLFQ: Summary</em></h3><p>MLFQ有趣的原因是：它不需要对工作的运行方式有先验知识，而是通过观察工作的运行来给出对应的优先级。通过这种方式，MLFQ可以同时满足各种工作的需求：对于短时间运行的交互型工作，获得类似于SJF/STCF的很好的全局性能，同时对长时间运行的CPU密集型负载也可以公平地、不断地稳步向前。<br></p>
<blockquote>
<p>Rule 1: if Priority(A) &gt; Priority(B), A runs (B doesn’t).</p>
</blockquote>
<blockquote>
<p>Rule 2: if Priority(A) = Priority(B), A &amp; B run in Round-Robin.</p>
</blockquote>
<blockquote>
<p>Rule 3: 当任务进入调度时，它将会被放置到最高优先级队列当中</p>
</blockquote>
<blockquote>
<p>Rule 4: 一旦工作用完了其在某一层中的时间配额（无论中间主动放弃了多少次<br>CPU），就降低其优先级（移入低一级队列）</p>
</blockquote>
<blockquote>
<p>Rule 5: 每隔一个时间段S，将系统中所有的任务移到最高优先级的队列当中</p>
</blockquote>
]]></content>
      <categories>
        <category>Operating System</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU Virtualization-Scheduling(Introduction)</title>
    <url>/panaceacode.github.io/2020/05/09/CPU-Virtualization-Scheduling-Introduction/</url>
    <content><![CDATA[<p>上节介绍的是low-level的mechanisms，比如线程如何切换。本节主要介绍的是Scheduling和一些scheduling policies，线程调度问题。这些是属于high-level policies。<br></p>
<h3 id="1-Workload-Assumption"><a href="#1-Workload-Assumption" class="headerlink" title="1. Workload Assumption"></a><em>1. Workload Assumption</em></h3><p>在讨论本节内容之前，我们先对进程做一些简化与假设：<br></p>
<ol>
<li>每个进程运行相同的时间</li>
<li>所有任务在同一时间到达</li>
<li>一旦任务开启，将会一直运行至结束</li>
<li>所有任务只会用到CPU（将不会使用I/O等）</li>
<li>每个任务的运行时间是已知的</li>
</ol>
<h3 id="2-Scheduling-Metrics"><a href="#2-Scheduling-Metrics" class="headerlink" title="2. Scheduling Metrics"></a><em>2. Scheduling Metrics</em></h3><p>我们需要定义一个衡量调度策略的方法，在这里，我们只定义一个方法，$T_{turnaround}$，用任务完成的时间减去任务到达的时间：$$T_{turnaround}=T_{completion}-T_{arrival}$$<br><br>因为现在假设所有任务在同一时间到达，所以$T_{turnaround} = T_{completion}$。需要注意的是，$T_{turnaround}$是用来衡量performance，另一个需要关注的点是fairness公平性，实际上，这两个指标往往是相斥的。<br></p>
<h3 id="3-FIFO-FCFS"><a href="#3-FIFO-FCFS" class="headerlink" title="3. FIFO/FCFS"></a><em>3. FIFO/FCFS</em></h3><p>First In, First Out或者First Come, First Serve. 先到先处理原则，简单易于实现。下面的例子，任务A，B，C依次进入，但是根据假设，它们的到达时间可以认为是相同的。所以在这里，平均$$T_{turnaround}=\frac{(10-0)+(20-0)+(30-0)}{3}=20$$。<br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/FIFO.png" width="73%" height="73%" align="middle" /><br><br>现在我们使假设1不成立，恰好有一个进程运行时间比其它进程久且第一个运行，如下图所示：<br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/FIFO1.png" width="73%" height="73%" align="middle" /><br><br>此时，平均$T_{turnaround}=\frac{(100-0)+(110-0)+(120-0)}{3}=110$，所以在这种情况下，A这个较长运行时间的进程将使得整体$T_{turnaround}$表现变差，文中举了个例子，好比是在超市结账的时候，在我们前面有个人有很多货品需要结账，这样就会使后面的人等待很长时间。<br></p>
<h3 id="4-Shortest-Job-First-SJF"><a href="#4-Shortest-Job-First-SJF" class="headerlink" title="4. Shortest Job First(SJF)"></a><em>4. Shortest Job First(SJF)</em></h3><p>AKA最短时间优先原则，在这种规则下，我们按照进程运行时间依次运行，运行时间越短的越先运行。用上面的例子来分析：<br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/SJF.png" width="73%" height="73%" align="middle" /><br><br>当A、B、C同时进入，因为B、C运行时间较短，在这种情况下先运行B、C，最后运行A，所以它的平均$T_{turnaround}=\frac{(10-0)+(20-0)+(120-0)}{3}=50$。<br><br>在我们的假设中，所有进程/任务都是在同一时间到达，但是很明显这是很理想化的，所以我们可能会遇到这样的问题：当任务A先到达时，B、C随之而来，假设它们的$T_{completion}=10$，这样的话，该种情况下的平均$T_{turnaround}=\frac{(100-0)+(110-10)+(120-10)}{3}=103.33$。<strong>注意</strong>：过去，我们会使用一些<strong>非抢占式</strong>的调度，这意味着系统在决定是否运行一个新的进程/任务时，会把当前任务执行完毕，这也是为什么在这里B、C不会在进入调度后立马执行。但是，现在我们会应用<strong>抢占式</strong>调度，这也就需要用到上一节<strong>上下文切换还/Context Switch</strong>的内容。<br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/SJF1.png" width="73%" height="73%" align="middle" /><br></p>
<h3 id="5-Shortest-Time-to-Completion-First-STCF"><a href="#5-Shortest-Time-to-Completion-First-STCF" class="headerlink" title="5. Shortest Time-to-Completion First(STCF)"></a><em>5. Shortest Time-to-Completion First(STCF)</em></h3><p>AKA最短剩余时间优先原则，SJF是属于一种非抢占式的调度方式，为了解决上述问题，STCF被提出来，在STCF中，每进来一个任务，该调度方法会调度当前剩余未完成的任务中剩余时间最少的任务，在上述例子中，任务B、C会抢占A，如下图所示，平均$T_{turnaround}=\frac{(20-10)+(30-10)+(120-0)}{3}=50$。<br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/STCF.png" width="73%" height="73%" align="middle" /><br></p>
<h3 id="6-A-New-Metric-Response-Time"><a href="#6-A-New-Metric-Response-Time" class="headerlink" title="6. A New Metric: Response Time"></a><em>6. A New Metric: Response Time</em></h3><p>如果假设4、5成立，所有任务时长都已知且只使用CPU，$T_{turnaround}$的衡量方法下的STCF表现较好，但是现在我们需要进行一些交互式的操作，所以一种新的衡量方式出现，Response time/反应时间。它的定义为任务第一次被调度的时间减去任务到达的时间：$$T_{response}=T_{firstrun}-T_{arrival}$$。以STCF中的图为例，A、B、C的反应时间分别为0、0、10，平均为3.33。下面会介绍在反应时间上表现较好的调度方法。<br></p>
<h3 id="7-Round-Robin-轮询"><a href="#7-Round-Robin-轮询" class="headerlink" title="7. Round Robin(轮询)"></a><em>7. Round Robin(轮询)</em></h3><p>在RR调度方法中，我们不会把某个任务一直运行到结束，而是分配给它一个时间片（time slice/scheduling quantum），当使用完该时间片后，我们会切换到另一个任务/进程，用下图来举个例子：<br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/Round%20Robin.png" width="73%" height="73%" align="middle" /><br><br>在该例中，时间片的长度为一个单位时间1，任务A、B、C的$T_{response}=\frac{0-0)+(1-0)+(2-0)}{3}=1$。再看看如果用的是SJF：<br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/SJF2.png" width="73%" height="73%" align="middle" /><br><br>在SJF中，任务A、B、C的$T_{response}=\frac{0-0)+(5-0)+(10-0)}{3}=5$。很明显，在Response time的衡量标准下，RR的表现更好，但同时也能发现，时间片的大小对RR也是至关重要的，当时间片越小时，反应时间表现越好，但同时切换任务时上下文切换会消耗很多性能，所以我们需要合理设置时间片的长度来分摊这一消耗。值得注意的是，上下文切换不仅仅是操作系统保存和恢复一些寄存器，程序在运行时，在CPU的高速缓存、TLB、分支预测器和一些其他硬件上也建立了大量状态。所以不同的调度算法会在周转时间和响应时间做不同的平衡。下面一小节要介绍在考虑IO操作的情况下的调度方法。</p>
<h3 id="8-结合I-O"><a href="#8-结合I-O" class="headerlink" title="8. 结合I/O"></a><em>8. 结合I/O</em></h3><p>当前进程需要访问I/O的时候，它会被阻塞直到I/O操作完成，如果这一操作需要访问磁盘，当前进程可能会被阻塞几毫秒或更长的时间，这时候当前进程并没有用到CPU，所以这时我们可以调度其他的进程。文中举了这样一个例子：两个任务A、B，且都需要使用50ms的CPU，但A每10ms会发起一次I/O操作，假设每次I/O操作耗时10ms，而B任务只是使用50ms的CPU。在这里如果使用STCF，按照之前的调度规则，我们可能会把A分成5个子任务，但总体还是两个任务运行，如下图所示：<br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/IO1.png" width="73%" height="73%" align="middle" /><br><br>这样的调度使得CPU资源没有得到充分利用，我们可以把A的5个子任务当成5个独立的任务，当一个A子任务完成调度，只剩下B任务，当后面的A子任务进来时，它将抢占当前运行的B，这样可以利用I/O过程中的CPU空闲期，如下图所示：<br><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Operating%20System/IO2.png" width="73%" height="73%" align="middle" /><br></p>
<h3 id="9-No-More-Oracle"><a href="#9-No-More-Oracle" class="headerlink" title="9. No More Oracle"></a><em>9. No More Oracle</em></h3><p>前面介绍了一些基本的IO操作情况下的调度，还有一点就是我们通常不知道进程/任务的运行时间，后面将介绍这个问题。</p>
]]></content>
      <categories>
        <category>Operating System</category>
      </categories>
      <tags>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>Edinburgh</title>
    <url>/panaceacode.github.io/2019/12/18/Edinburgh/</url>
    <content><![CDATA[<h1 id="2019-12-17"><a href="#2019-12-17" class="headerlink" title="2019/12/17"></a><em>2019/12/17</em></h1><p><em>出发去英国</em><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Edinburgh/ticket.jpg" width="50%" height="35%" align="middle" /><br></p>
<p><em>落地伦敦，提前复习了一遍哈利波特，特意到King’s Cross转车</em><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Edinburgh/kingscross.jpg" width="50%" height="50%" align="middle" /><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Edinburgh/kingscross1.jpg" width="50%" height="50%" align="middle" /><br></p>
<p><em>出发去爱丁堡，开心！</em><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Edinburgh/trainTicket.jpg" width="50%" height="35%" align="middle" /><br></p>
<h1 id="2019-12-18"><a href="#2019-12-18" class="headerlink" title="2019/12/18"></a><em>2019/12/18</em></h1><p><em>在爱丁堡的第一天</em><br><img src="https://blog-lzr.oss-cn-shanghai.aliyuncs.com/Edinburgh/edinburgh.jpg" width="50%" height="50%" align="middle" /></p>
]]></content>
      <categories>
        <category>Travel</category>
      </categories>
      <tags>
        <tag>Travel</tag>
        <tag>Edinburgh</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH连接GitHub账号</title>
    <url>/panaceacode.github.io/2019/10/19/SSH%E8%BF%9E%E6%8E%A5GitHub%E8%B4%A6%E5%8F%B7/</url>
    <content><![CDATA[<p>简单介绍一下用SSH连接GitHub的流程<a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh">参考链接</a></p>
<h3 id="1-Mac环境下检查一下已存在的-SSH-Keys"><a href="#1-Mac环境下检查一下已存在的-SSH-Keys" class="headerlink" title="1. Mac环境下检查一下已存在的 SSH Keys"></a><em>1. Mac环境下检查一下已存在的 SSH Keys</em></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure>
<p>可能的keys：id_rsa.pub、id_ecdsa.pub、id_ed25519.pub<br><br></p>
<h3 id="2-生成新的-SSH-keys"><a href="#2-生成新的-SSH-keys" class="headerlink" title="2. 生成新的 SSH keys"></a><em>2. 生成新的 SSH keys</em></h3><p>在Terminal中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果不支持ed25519，可以用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>生成一个新的ssh key，用邮箱作为label</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; Generating public/private ed25519 key pair.</span><br></pre></td></tr></table></figure>
<p>Press enter</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; Enter a file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/you/.ssh/id_ed25519): [Press enter]</span><br></pre></td></tr></table></figure>
<p>可设置passphrase</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span><br><span class="line">&gt; Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure>
<br>

<h3 id="3-将-SSH-keys加入ssh-agent"><a href="#3-将-SSH-keys加入ssh-agent" class="headerlink" title="3. 将 SSH keys加入ssh-agent"></a><em>3. 将 SSH keys加入ssh-agent</em></h3><p>启动ssh-agent</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br><span class="line">&gt; Agent pid 59566</span><br></pre></td></tr></table></figure>
<p>如果你是macOS Sierra 10.12.2或更高，需要修改~/.ssh/config文件，才能自动把keys加载到ssh-agent并在keychain中储存passphrases</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ open ~/.ssh/config</span><br><span class="line">&gt; The file /Users/you/.ssh/config does not exist.</span><br></pre></td></tr></table></figure>
<p>如果该文件不存在，创建该文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ touch ~/.ssh/config</span><br></pre></td></tr></table></figure>
<p>如果你使用默认路径和命名，修改为如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host *</span><br><span class="line">  AddKeysToAgent yes</span><br><span class="line">  UseKeychain yes</span><br><span class="line">  IdentityFile ~/.ssh/id_ed25519</span><br></pre></td></tr></table></figure>
<p>将SSH私钥加入到ssh-agent，并在keychain中储存passphrase</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-add -K ~/.ssh/id_ed25519</span><br></pre></td></tr></table></figure>
<br>

<h3 id="4-将-SSH-key加入到-GitHub账号中"><a href="#4-将-SSH-key加入到-GitHub账号中" class="headerlink" title="4. 将 SSH key加入到 GitHub账号中"></a><em>4. 将 SSH key加入到 GitHub账号中</em></h3><p>拷贝SSH公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pbcopy &lt; ~/.ssh/id_ed25519.pub</span><br><span class="line"><span class="comment"># Copies the contents of the id_ed25519.pub file to your clipboard</span></span><br></pre></td></tr></table></figure>
<p>进入GitHub Settings =&gt; “SSH and GPG keys”，新建并添加新key<br><br></p>
<h3 id="5-测试连接"><a href="#5-测试连接" class="headerlink" title="5. 测试连接"></a><em>5. 测试连接</em></h3><p>在Terminal中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line"><span class="comment"># Attempts to ssh to GitHub</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; The authenticity of host <span class="string">&#x27;github.com (IP ADDRESS)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">&gt; RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span></span><br><span class="line"><span class="string">&gt; Are you sure you want to continue connecting (yes/no)?</span></span><br><span class="line"><span class="string"># print yes</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; Hi username! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not</span></span><br><span class="line"><span class="string">&gt; provide shell access.</span></span><br></pre></td></tr></table></figure>
<br>

<h3 id="现在可进行关联远程仓库等操作"><a href="#现在可进行关联远程仓库等操作" class="headerlink" title="现在可进行关联远程仓库等操作"></a><em>现在可进行关联远程仓库等操作</em></h3><p>关联远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:&lt;username&gt;/&lt;repositoryName&gt;.git</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术随笔</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>技术随笔</tag>
      </tags>
  </entry>
</search>
